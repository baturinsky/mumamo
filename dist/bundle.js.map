{
  "version": 3,
  "sources": ["../src/util.ts", "../src/plot.ts", "../src/main.ts"],
  "sourcesContent": ["const maxN = 2 ** 31;\nexport let rng: (n?: number) => number;\n\nexport function RNG(seed?: number): (n?: number) => number {\n  if (seed == null)\n    seed = Math.random();\n  if (0 < seed && seed < 1)\n    seed = ~~(seed * maxN);\n\n  let rngi = (n) => {\n    return (seed = (seed * 16807) % 2147483647) % n;\n  };\n\n  rng = (n) => {\n    return n == -1 ? seed : n == null ? rngi(maxN) / maxN : rngi(n)\n  }\n  return rng;\n}\n\nexport function randomElement(list: any[], gen = rng) {\n  if (!list)\n    return null;\n  let n = gen(list.length);\n  return list[n];\n}\n\nexport function shuffle(arr: any[], rng) {\n\n  arr = [...arr];\n  let l = arr.length;\n  for (let i = 1; i < l; i++) {\n    let r = rng(l);\n    if (r != i) {\n      [arr[i], arr[r]] = [\n        arr[r], arr[i]];\n    }\n  }\n\n  return arr;\n}\n\n\nexport const emogiRegEx = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;", "export let plot = \n`1101\n*\nSo, Detective, what will be my first task as your Assistant?\nHmm hmm hmm yes! See this board? It's so called Evidence Board, also known as the MURDER MAP!\nEeek!\nDo not fret. It's mostly harmless. It just helps me to visualise evidence I have and connections between the pieces of it.\nLooks messy.\nIndeed! And this is where you come into picture. You will help me untangle it. Move pieces around, so strings stop crossing over cards.\nHmm, I guess I can do that. Anything else?\nAlso, in the end, all cards should be on board, but you can temporarily move them to the sides. That's it.\nOK, I think I can do it.\n=160\nYou was a great help last time.\nI have just moved some paper around.\nAnd did it splendidly! Now I have another task for you.\nLet me guess...\nYes! Another tangled board to untangle.\nWill it teach me how to solve cases?\nIt will teach you to untangle strings!\nSigh... OK.\n=27070\nAaaand... another board!\nAt least this time I actually have helped to add some pieces to it.\nYes! Pieces that have added a lot of new strings to untangle!\nYay, I guess.\n=27090\n*\nSo. Many. Strings.\nYes. It's all connected. \nWill it make solving it harder or easier?\nWe'll see. Will it make placing it easier?\nWe'll see. I'm not sure it's even possible.\n`", "import { emogiRegEx, randomElement, RNG, rng, shuffle } from \"./util\";\r\nimport { plot } from \"./plot\"\r\n\r\ndeclare const\r\n  Table: HTMLDivElement,\r\n  Board: HTMLDivElement,\r\n  CST: HTMLDivElement,\r\n  Talk: HTMLDivElement,\r\n  Char: HTMLDivElement,\r\n  Pins: HTMLDivElement,\r\n  StringsPath: SVGPathElement,\r\n  StringsWrongPath: SVGPathElement;\r\n{\r\n  type V2 = { x: number, y: number };\r\n  const v2 = (x: number, y: number) => ({ x, y })\r\n  const sum = (a: V2, b: V2) => ({ x: a.x + b.x, y: a.y + b.y })\r\n  const sub = (a: V2, b: V2) => ({ x: a.x - b.x, y: a.y - b.y })\r\n  const length = (a: V2) => (a.x ** 2 + a.y ** 2) ** 0.5;\r\n\r\n  let levels = plot.split(\"=\").map(s => s.trim().split(\"\\n\"));\r\n  let seed;\r\n  let level;\r\n  let line = 1;\r\n  let leveln = 0;\r\n  let maxLevel = 0;\r\n  let win = false;\r\n\r\n  const slots: HTMLDivElement[] = [];\r\n  let cards: { [id: string]: Card } = {};\r\n  let links: Link[] = [];\r\n  let board: Card[] = [];\r\n  let slotn = 0;\r\n\r\n  const columns = 12, rows = 6, totalSlots = columns * rows;\r\n\r\n  class Link {\r\n    ap: V2;\r\n    bp: V2;\r\n    cp: V2;\r\n    a: Card;\r\n    b: Card;\r\n    length: number;\r\n\r\n    constructor(aId: string, bId: string) {\r\n      this.a = cards[aId];\r\n      this.b = cards[bId];\r\n      links.push(this);\r\n    }\r\n\r\n    update(ap: V2, bp: V2) {\r\n      this.ap = ap;\r\n      this.bp = bp;\r\n      this.length = length(sub(this.ap, this.bp));\r\n      this.cp = v2(ap.x / 2 + bp.x / 2, ap.y / 2 + bp.y / 2 + Math.min(100, Math.abs(ap.x - bp.x) * 0.3));\r\n    }\r\n\r\n\r\n    curve(t: number) {\r\n      let { ap, bp, cp } = this;\r\n      let v = (1 - t) ** 2, w = t ** 2\r\n      return v2(cp.x + v * (ap.x - cp.x) + w * (bp.x - cp.x), cp.y + v * (ap.y - cp.y) + w * (bp.y - cp.y));\r\n    }\r\n\r\n    toPath() {\r\n      let { ap, bp, cp } = this;\r\n      let covered = this.checkIntersections()\r\n      return [covered, `M${ap.x} ${ap.y} Q${cp.x} ${cp.y} ${bp.x} ${bp.y}`];\r\n    }\r\n\r\n    checkIntersections() {\r\n\r\n      let steps = this.length / 10;\r\n      for (let i = 1; i < steps - 1; i++) {\r\n        let p = this.curve(i / steps);\r\n        for (let c of allCards()) {\r\n          if (c == this.a || c == this.b)\r\n            continue;\r\n          if (c.contains(p))\r\n            return c;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n  }\r\n\r\n  class Generator {\r\n    shuffled = shuffle(photos, rng);\r\n    shuffledEvidence = shuffle(evidence, rng);\r\n\r\n    constructor() {\r\n    }\r\n\r\n    nextCard(slot?: number) {\r\n      let id: string, type: string;\r\n      if (slot != null && landmarkIn[slot] && rng(3) == 0) {\r\n        id = landmarkIn[slot].icon;\r\n        type = \"lm\";\r\n      } else {\r\n        type = randomElement([\"ev\", \"po\", \"np\", \"nt\", \"st\"]);\r\n        id = (type == \"ev\" ? this.shuffledEvidence : this.shuffled).pop();\r\n      }\r\n      return { type, id };\r\n    }\r\n\r\n    simpleCards(chance: number) {\r\n      let cards = []\r\n      for (let slot = 0; slot < totalSlots; slot++) {\r\n        if (rng() < chance) {\r\n          let { type, id } = this.nextCard(slot);\r\n          if (id)\r\n            cards.push({ id, type, slot })\r\n        }\r\n      }\r\n      return cards;\r\n    }\r\n\r\n    neighborLinks(cards, linkChance) {\r\n      let b:string[] = [];\r\n      let links:[string, string][] = [];\r\n      for(let c of cards)\r\n        b[c.slot] = c.id;\r\n\r\n      for (let slot = 0; slot < totalSlots - columns; slot++) {\r\n        if(!b[slot])\r\n          continue;\r\n        if((slot+1)%columns==0)\r\n          continue;\r\n        if(rng()<linkChance && b[slot+1])\r\n          links.push([b[slot], b[slot+1]]);\r\n        if(rng()<linkChance && b[slot+columns])\r\n          links.push([b[slot], b[slot+columns]]);\r\n        if(rng()<linkChance && b[slot+columns+1])\r\n          links.push([b[slot], b[slot+columns+1]]);\r\n        if(slot%columns>0 && rng()<linkChance && b[slot+columns-1])\r\n          links.push([b[slot], b[slot+columns-1]]);\r\n      }\r\n      return links;\r\n    }\r\n\r\n    randomLinks(cards:{id:string}[]){\r\n      let links:[string, string][] = [];\r\n      for (let c1 of cards.map(c => c.id)) {\r\n        let c2 = randomElement(cards).id;\r\n        if (c1 != c2 && !links.find(l => l[0] == c1 && l[1] == c2 || l[1] == c1 && l[0] == c2)) {\r\n          links.push([c1, c2]);\r\n        }\r\n      }\r\n      return links;\r\n    }\r\n\r\n    generate(lseed: string) {\r\n      RNG(Number(lseed));\r\n      console.log({ seed: lseed });\r\n      let density = Number(lseed.substring(1, 3)) / 100;\r\n      let density2 = Number(lseed.substring(3, 5)) / 100;\r\n      let cards, links;\r\n      switch (lseed[0]) {\r\n        case \"2\":\r\n          cards = this.simpleCards(density);\r\n          links = this.neighborLinks(cards, density2);\r\n          //cards = shuffleSlots(cards);\r\n          break;\r\n        default:\r\n          cards = this.simpleCards(density);\r\n          links = this.randomLinks(cards);\r\n          break;\r\n      }\r\n  \r\n      return { cards, links, seed: lseed };\r\n    }\r\n\r\n\r\n  }\r\n\r\n  class Card {\r\n    div: HTMLDivElement;\r\n    id: string;\r\n    type: string;\r\n    slot: number;\r\n    points: V2[] = [];\r\n    at: V2;\r\n    r: DOMRect;\r\n\r\n    constructor({ id, type, slot, at }) {\r\n      let div: HTMLDivElement;\r\n      type = type || \"po\";\r\n      this.type = type;\r\n      this.id = id;\r\n\r\n      div = document.createElement(\"div\")\r\n      if (type == \"lm\") {\r\n        let m = landmarks.find(lm => lm.icon == id)\r\n        div.style.marginLeft = `calc(-2rem + ${fract(m.x / 100 * columns) * 100}%)`;\r\n        div.style.marginTop = `calc(-1.5rem + ${fract(m.y / 100 * rows) * 100}%)`;\r\n        div.innerHTML = \"O\";\r\n        div.style.fontSize = `${rng(4) + 3}rem;`\r\n        div.classList.add(\"lm\", type);\r\n      } else {\r\n        div.classList.add(\"card\", type);\r\n        if (!rng(4))\r\n          div.classList.add(\"warp\");\r\n        let rot = rng() * 6 - 3;\r\n        div.style.transform = `translate(${rng() * 10 - 5}px, ${rng() * 10 - 5}px) rotate(${rot}deg)`\r\n        div.style.width = type == \"nt\" ? `${rng() * 0.5 + 1}em` : \"\";\r\n        div.draggable = true;\r\n        div.ondragstart = e => e.dataTransfer.setData(\"text\", id);\r\n        let words = { po: 3, np: 150, nt: 3 }[type] || 0;\r\n        let title = { np: 1, st: 3 }[type] || 0;\r\n        let columns = { np: rng(2) + 1 }[type];\r\n        let float = type == \"np\" && randomElement([\"left\", \"right\", \"center\"]);\r\n        let paper = type != \"ev\" && type != \"do\";\r\n        let style = `background:hsla(${rng(360)}, 50%, 10%, ${paper ? 100 : 0}%); \r\n        float: ${float}; ${float == \"center\" ? \"width:100%;\" : \"\"};`;\r\n        if (type == \"ev\") {\r\n          let evInd = evidence.indexOf(id);\r\n          style += `transform: rotateZ(${evInd < 4 ? -45 : evInd < 7 ? 45 : 0}deg);`\r\n        }\r\n        let mark = paper && rng(8) == 0;\r\n        div.innerHTML = `\r\n        <div class=\"note\" style=\"columns: ${columns};\">\r\n          ${title > 0 ? `<h1>${randomText(rng(title) + title)}</h1>` : \"\"}\r\n          <div class=\"${type == \"nt\" && [\"invert\", \"green\", \"gray\"][rng(10)]} photo\" style=\"${style}\">\r\n            ${id}\r\n          </div>\r\n          <span style=\"transform:rotate(${-rot + rng() * 3 - 1.5}deg)\">${randomText(rng(~~(words / 3)) + words)}</span>\r\n        </div>\r\n        <div class=\"overlay\">${mark ? \"\u2718\u2718!?\"[rng(4)] : type == \"do\" ? \"\" : \"\"}</div>`;\r\n        if (paper)\r\n          div.style.background = `hsl(${rng(360)}, ${type == \"st\" ? 100 : 20}%, 90%)`;\r\n      }\r\n      this.div = div;\r\n      div.id = id;\r\n      div.onmouseenter = () => highlightNeighbors(div);\r\n      div.onmouseleave = () => highlightNeighbors(null);\r\n      div.setAttribute(\"type\", type);\r\n\r\n      cards[id] = this;\r\n\r\n      this.addToSlot(slot);\r\n      this.setAt(at);\r\n      this.recalculate();\r\n    }\r\n\r\n    recalculate() {\r\n      let r = this.div.getBoundingClientRect();\r\n      this.at = v2(r.left, r.top);\r\n      this.r = r;\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        let margin = 10;\r\n        let p: V2;\r\n        if (this.type == \"lm\") {\r\n          p = v2(r.width / 2, r.height / 2);\r\n        } else {\r\n\r\n          p = v2(i % 2 == 1 ? r.width - margin : margin,\r\n            i < 2 ? margin : r.height - (this.type == \"nt\" ? 0 : margin))\r\n        }\r\n        if (this.type == \"ev\") {\r\n          p[4] = v2(r.width / 2, 20);\r\n        }\r\n        this.points[i] = p;\r\n      }\r\n    }\r\n\r\n    setAt(at) {\r\n      if (at) {\r\n        this.div.style.left = at[0];\r\n        this.div.style.top = at[1];\r\n      }\r\n    }\r\n\r\n    move(slot: number, x: number, y: number) {\r\n      if (this.type == \"lm\")\r\n        return;\r\n\r\n      if (slot != null && board[slot] != null) {\r\n        let other = board[slot];\r\n        if (other.type == \"lm\")\r\n          return;\r\n        other.addToSlot(this.slot);\r\n        other.div.style.left = this.div.style.left;\r\n        other.div.style.top = this.div.style.top;\r\n      }\r\n\r\n      this.addToSlot(slot);\r\n      this.div.style.left = `${x - this.div.getBoundingClientRect().width / 2}px`;\r\n      this.div.style.top = `${y - this.div.getBoundingClientRect().height / 2}px`;\r\n    }\r\n\r\n    addToSlot(slot: number) {\r\n\r\n      (slot == null ? Table : slots[slot]).appendChild(this.div);\r\n      if (this.slot != null && board[this.slot] == this)\r\n        delete board[this.slot];\r\n      this.slot = slot;\r\n      if (slot != null)\r\n        board[slot] = this;\r\n    }\r\n\r\n\r\n    point(ind: number) {\r\n      return sum(this.points[ind], this.at);\r\n    }\r\n\r\n    contains(p: V2) {\r\n      return this.at.x <= p.x && this.at.y <= p.y && this.at.x + this.r.width >= p.x && this.at.y + this.r.height >= p.y;\r\n    }\r\n  }\r\n\r\n  function allCards() {\r\n    return Object.values(cards);\r\n  }\r\n\r\n  function bp(card: Card, other: Card): V2 {\r\n    let pointInd = (other.at.x > card.at.x + 10 ? 1 : 0) + (other.at.y > card.at.y + 10 ? 2 : 0);\r\n    return card.point(pointInd);;\r\n  }\r\n\r\n\r\n  let update = (t: number) => {\r\n    window.requestAnimationFrame(update)\r\n  }\r\n\r\n  update(0);\r\n\r\n  window.onmousemove = e => { }\r\n\r\n  window.onwheel = e => { };\r\n\r\n  function splitEmojis(t): string[] {\r\n    return t.split(emogiRegEx).filter(a => a && a != ' ');\r\n  }\r\n\r\n  function fract(n: number) {\r\n    return n - ~~n;\r\n  }\r\n\r\n  function splitLandmarks(t) {\r\n    let array = t.split(\" \");\r\n    let r = [];\r\n    const chunkSize = 3;\r\n    for (let i = 0; i < array.length; i += chunkSize) {\r\n      r.push({ icon: array[i], x: array[i + 1] - 8, y: array[i + 2] - 12 });\r\n    }\r\n    let html = \"<div id=WorldIcon>\uD83D\uDDFA</div>\";\r\n    for (let m of r) {\r\n      m.cell = ~~(m.x / 100 * columns) + ~~((m.y + 3) / 100 * rows) * columns;\r\n      landmarkIn[m.cell] = m;\r\n      html += `<div class=\"lmi\" id=${m.icon} style=\"left:${m.x}%;top:${m.y}%;\">${m.icon}</div>`\r\n    }\r\n    document.getElementById(\"World\").innerHTML = html;\r\n\r\n    return r;\r\n  }\r\n\r\n  for (let i = 0; i < columns * rows; i++) {\r\n    addSlot();\r\n  }\r\n\r\n  const photos = splitEmojis(\"\uD83E\uDD35\uD83D\uDC70\uD83E\uDD31\uD83D\uDC68\u200D\u2695\uFE0F\uD83D\uDC69\u200D\u2695\uFE0F\uD83D\uDC68\u200D\uD83C\uDF93\uD83D\uDC69\u200D\uD83C\uDF93\uD83D\uDC68\u200D\u2696\uFE0F\uD83D\uDC69\u200D\u2696\uFE0F\uD83D\uDC68\u200D\uD83C\uDF3E\uD83D\uDC69\u200D\uD83C\uDF3E\uD83D\uDC68\u200D\uD83C\uDF73\uD83D\uDC69\u200D\uD83C\uDF73\uD83D\uDC68\u200D\uD83D\uDD27\uD83D\uDC69\u200D\uD83D\uDD27\uD83D\uDC68\u200D\uD83C\uDFED\uD83D\uDC69\u200D\uD83C\uDFED\uD83D\uDC68\u200D\uD83D\uDCBC\uD83D\uDC69\u200D\uD83D\uDCBC\uD83D\uDC68\u200D\uD83D\uDD2C\uD83D\uDC69\u200D\uD83D\uDD2C\uD83D\uDC68\u200D\uD83D\uDCBB\uD83D\uDC69\u200D\uD83D\uDCBB\uD83D\uDC68\u200D\uD83C\uDFA4\uD83D\uDC69\u200D\uD83C\uDFA4\uD83D\uDC68\u200D\uD83C\uDFA8\uD83D\uDC69\u200D\uD83C\uDFA8\uD83D\uDC68\u200D\u2708\uFE0F\uD83D\uDC69\u200D\u2708\uFE0F\uD83D\uDC68\u200D\uD83D\uDE80\uD83D\uDC69\u200D\uD83D\uDE80\uD83D\uDC68\u200D\uD83D\uDE92\uD83D\uDC69\u200D\uD83D\uDE92\uD83D\uDC6E\u200D\u2642\uFE0F\uD83D\uDC6E\u200D\u2640\uFE0F\uD83D\uDD75\uFE0F\u200D\u2642\uFE0F\uD83D\uDD75\uFE0F\u200D\u2640\uFE0F\uD83D\uDC82\u200D\u2642\uFE0F\uD83D\uDC82\u200D\u2640\uFE0F\uD83D\uDC77\u200D\u2642\uFE0F\uD83D\uDC77\u200D\u2640\uFE0F\uD83E\uDDD9\u200D\u2640\uFE0F\uD83E\uDDD9\u200D\u2642\uFE0F\uD83E\uDDDA\u200D\u2640\uFE0F\uD83E\uDDDA\u200D\u2642\uFE0F\uD83E\uDDDB\u200D\u2640\uFE0F\uD83E\uDDDB\u200D\u2642\uFE0F\uD83E\uDDDC\u200D\u2640\uFE0F\uD83E\uDDDC\u200D\u2642\uFE0F\uD83E\uDDDD\u200D\u2640\uFE0F\uD83E\uDDDD\u200D\u2642\uFE0F\uD83E\uDDDE\u200D\u2640\uFE0F\uD83E\uDDDE\u200D\u2642\uFE0F\uD83E\uDDDF\u200D\u2640\uFE0F\uD83E\uDDDF\u200D\u2642\uFE0F\");\r\n  const evidence = splitEmojis(\"\uD83D\uDD2A\uD83D\uDDE1\uFE0F\uD83D\uDD11\uD83D\uDDDD\uFE0F\uD83D\uDD27\u270F\uFE0F\uD83D\uDD8B\uFE0F\uD83C\uDF80\uD83D\uDCFF\uD83D\uDCF1\uD83D\uDCBE\uD83D\uDCC0\uD83D\uDCFC\uD83D\uDCD3\uD83D\uDCD2\uD83D\uDCB5\u2702\uFE0F\u2699\uFE0F\uD83E\uDE92\uD83D\uDCF0\u2709\uFE0F\uD83D\uDDC2\uFE0F\uD83E\uDDE7\");\r\n  const landmarkIn = {};\r\n  const landmarks = splitLandmarks(\"\uD83D\uDDFD 38 52 \uD83C\uDF0B 79 74 \uD83C\uDFEF 86 54 \uD83D\uDD4B 63 58 \uD83D\uDED5 71 65 \uD83C\uDF01 61 40 \uD83D\uDD4C 68 51 \u26EA 43 85 \uD83D\uDD4D 80 52 \uD83D\uDEA2 96 70 \uD83C\uDF09 27 52 \u26F2 54 66 \uD83E\uDD8F 60 85 \uD83E\uDD98 87 86 \uD83E\uDDCA 45 23\");\r\n\r\n  const words = Object.keys(window).filter(w => w.length < 10);\r\n\r\n  function randomText(len: number = 0) {\r\n    return len ? [...new Array(len)].map(v => randomElement(words)).join(\" \") : \"\"\r\n  }\r\n\r\n  function addSlot() {\r\n    let slot = document.createElement(\"div\")\r\n    slot.classList.add(\"slot\");\r\n    slot.id = slotn++ as any;\r\n    slots[slot.id] = slot;\r\n    makeDroppable(slot);\r\n    Board.appendChild(slot);\r\n  }\r\n\r\n  let preventDoubleDrop = false;\r\n\r\n  function makeDroppable(div: HTMLDivElement) {\r\n    div.ondragover = e => e.preventDefault();\r\n    div.ondrop = e => {\r\n      e.preventDefault();\r\n      if (preventDoubleDrop) {\r\n        preventDoubleDrop = false;\r\n        return;\r\n      }\r\n      let data = e.dataTransfer.getData(\"text\");\r\n      let slotId = div.id == \"Table\" ? null : div.id as any;\r\n      if (slotId != null)\r\n        preventDoubleDrop = true;\r\n      let card = cards[data];\r\n      card.move(slotId, e.clientX, e.clientY);\r\n      relink();\r\n    }\r\n  }\r\n\r\n\r\n  function connectedTo(card: Card) {\r\n    let cc = links.map(l => l.a == card ? l.b : l.b == card ? l.a : null).filter(c => c);\r\n    return cc;\r\n  }\r\n\r\n  //function connectedLinks(card: Card) {return links.filter(l => l.a == card || l.b == card)}\r\n\r\n  function highlightNeighbors(cardDiv) {\r\n    let card = cards[cardDiv?.id];\r\n    for (let c of allCards())\r\n      if(c.slot)\r\n        slots[c.slot].classList.remove(\"hl\");\r\n    if (card)\r\n      for (let connected of connectedTo(card))\r\n        if(connected.slot)\r\n          slots[connected.slot].classList.add(\"hl\")\r\n    //relink(connectedLinks);\r\n  }\r\n\r\n\r\n  function relink() {\r\n    for (let c of allCards())\r\n      c.recalculate();\r\n\r\n    links.forEach(l => l.update(bp(l.a, l.b), bp(l.b, l.a)));\r\n\r\n    Pins.innerHTML = links.map(l => [l.ap, l.bp]).flat().map(v =>\r\n      `<div class=\"pin\" style=\"left:${v.x - 3}px;top:${v.y - 7}px\">\uD83D\uDCCD</div>`\r\n    ).join(\" \");\r\n\r\n    let path = links.map(l => l.toPath());\r\n\r\n    win = path.every(p=>!p[0]) && allCards().every(c=>c.slot !=null);    \r\n\r\n    StringsPath.setAttribute(\"d\", path.filter(v => !v[0]).map(v => v[1]).join(\" \"));\r\n    StringsWrongPath.setAttribute(\"d\", path.filter(v => v[0]).map(v => v[1]).join(\" \"));\r\n    savePosition();\r\n    showLine();\r\n  }\r\n\r\n  function shuffleSlots(cards:{slot:number, type:string}[]){\r\n    for(let card of cards){\r\n      if(card.type == \"lm\")\r\n        continue;\r\n      let other = randomElement(cards);\r\n      if(other.type == \"lm\")\r\n        continue;\r\n      let s = other.slot;\r\n      other.slot = card.slot;\r\n      card.slot = s;\r\n    }\r\n    return cards;\r\n  }\r\n\r\n\r\n  function initPosition(s: number) {\r\n    RNG(s);\r\n    let p = new Generator().generate(s.toString());\r\n    loadPosition(p)\r\n  }\r\n\r\n  function divPosition(div: HTMLDivElement) {\r\n    return [div.style.left, div.style.top];\r\n  }\r\n\r\n  function savePosition() {\r\n    let data = {\r\n      seed,\r\n      level,\r\n      line,\r\n      maxLevel,\r\n      cards: allCards().map(c => ({\r\n        id: c.id,\r\n        type: c.type,\r\n        slot: c.slot,\r\n        at: divPosition(c.div)\r\n      })),\r\n      links: links.map(l => [l.a.id, l.b.id])\r\n    }\r\n    console.log(data);\r\n    localStorage.mumamo = JSON.stringify(data);\r\n  }\r\n\r\n  function loadPosition(data) {\r\n    cards = {};\r\n    links = [];\r\n    board = [];\r\n    if (data.line != null)\r\n      line = data.line;\r\n    if (data.maxLevel != null)\r\n      maxLevel = data.maxLevel;\r\n    if (data.level != null)\r\n      level = data.level;\r\n    if (data.seed != null)\r\n      seed = data.seed;\r\n    for (let s of slots) {\r\n      s.innerHTML = \"\";\r\n    }\r\n    RNG(seed);\r\n    console.log(\"R\", data.seed, rng(10));\r\n    for (let c of data.cards)\r\n      new Card(c);\r\n    for (let l of data.links)\r\n      new Link(l[0], l[1]);\r\n    relink();\r\n  }\r\n\r\n\r\n  window.onresize = relink;\r\n  window.onkeydown = (e: KeyboardEvent) => {\r\n    console.log(e);\r\n    if(e.code.substring(0,5) == \"Digit\"){\r\n      playLevel(Number(e.key)-1);\r\n    }\r\n  }\r\n\r\n  function playLevel(n) {\r\n    leveln = n;\r\n    level = levels[n];\r\n    line = 1;\r\n    seed = Number(level[0]);\r\n    initPosition(seed);\r\n    showLine();\r\n  }\r\n\r\n  function showLine(increment = false) {\r\n    if(increment)\r\n      line++;\r\n    if (level[line] == \"*\")\r\n      line++;\r\n    Char.innerText = line % 2 ? \"\uD83D\uDD75\uFE0F\" : \"\uD83D\uDD75\uFE0F\u200D\u2640\uFE0F\";\r\n    CST.innerText = win?\"Well done!\":level[line];\r\n    Talk.style.display = line >= level.length && !win ? \"none\" : \"flex\";\r\n    savePosition();\r\n  }\r\n\r\n  Talk.onclick = ()=>{\r\n    if(win && leveln < levels.length-1)\r\n      playLevel(leveln + 1);\r\n    else\r\n      showLine(true);\r\n  }\r\n\r\n  makeDroppable(Table)\r\n\r\n  if (localStorage.mumamo) {\r\n    loadPosition(JSON.parse(localStorage.mumamo));\r\n    showLine();\r\n  } else {\r\n    playLevel(0);\r\n  }\r\n\r\n}"],
  "mappings": "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",
  "names": ["rng", "RNG", "seed", "rngi", "n", "randomElement", "list", "gen", "shuffle", "arr", "l", "i", "r", "emogiRegEx", "plot", "allCards", "cards", "bp", "card", "other", "pointInd", "splitEmojis", "t", "emogiRegEx", "a", "fract", "n", "splitLandmarks", "array", "r", "chunkSize", "i", "html", "m", "columns", "rows", "landmarkIn", "randomText", "len", "v", "randomElement", "words", "addSlot", "slot", "slotn", "slots", "makeDroppable", "div", "e", "preventDoubleDrop", "data", "slotId", "relink", "connectedTo", "links", "l", "c", "highlightNeighbors", "cardDiv", "connected", "path", "win", "p", "savePosition", "showLine", "shuffleSlots", "s", "initPosition", "RNG", "Generator", "loadPosition", "divPosition", "seed", "level", "line", "maxLevel", "board", "rng", "Card", "Link", "playLevel", "leveln", "levels", "increment", "v2", "x", "y", "sum", "b", "sub", "length", "plot", "totalSlots", "aId", "bId", "ap", "cp", "w", "steps", "shuffle", "photos", "evidence", "id", "type", "chance", "linkChance", "c1", "c2", "lseed", "density", "density2", "at", "landmarks", "lm", "rot", "title", "float", "paper", "style", "evInd", "mark", "margin", "ind", "update"]
}
