{
  "version": 3,
  "sources": ["../src/util.ts", "../src/plot.ts", "../src/main.ts"],
  "sourcesContent": ["const maxN = 2 ** 31;\nexport let rng: (n?: number) => number;\n\nexport function RNG(seed?: number): (n?: number) => number {\n  if (seed == null)\n    seed = Math.random();\n  if (0 < seed && seed < 1)\n    seed = ~~(seed * maxN);\n\n  let rngi = (n) => {\n    return (seed = (seed * 16807) % 2147483647) % n;\n  };\n\n  rng = (n) => {\n    return n == -1 ? seed : n == null ? rngi(maxN) / maxN : rngi(n)\n  }\n  return rng;\n}\n\nexport function randomElement(list: any[], gen = rng) {\n  if (!list)\n    return null;\n  let n = gen(list.length);\n  return list[n];\n}\n\nexport function shuffle(arr: any[], rng) {\n\n  arr = [...arr];\n  let l = arr.length;\n  for (let i = 1; i < l; i++) {\n    let r = rng(l);\n    if (r != i) {\n      [arr[i], arr[r]] = [\n        arr[r], arr[i]];\n    }\n  }\n\n  return arr;\n}\n\n\nexport const emogiRegEx = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF](?:[\\u200D\\uFE0F][\\uD800-\\uDBFF][\\uDC00-\\uDFFF]){2,}|\\uD83D\\uDC69(?:\\u200D(?:(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67|(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|\\uD83D\\uDC69\\u200D(?:\\uD83D\\uDC69\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C\\uDFF3\\uFE0F\\u200D\\uD83C\\uDF08|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC6F\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3C-\\uDD3E\\uDDD6-\\uDDDF])\\u200D[\\u2640\\u2642]\\uFE0F|\\uD83C\\uDDFD\\uD83C\\uDDF0|\\uD83C\\uDDF6\\uD83C\\uDDE6|\\uD83C\\uDDF4\\uD83C\\uDDF2|\\uD83C\\uDDE9(?:\\uD83C[\\uDDEA\\uDDEC\\uDDEF\\uDDF0\\uDDF2\\uDDF4\\uDDFF])|\\uD83C\\uDDF7(?:\\uD83C[\\uDDEA\\uDDF4\\uDDF8\\uDDFA\\uDDFC])|\\uD83C\\uDDE8(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDEE\\uDDF0-\\uDDF5\\uDDF7\\uDDFA-\\uDDFF])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uFE0F\\u200D[\\u2640\\u2642]|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2640\\u2642])\\uFE0F|(?:\\uD83D\\uDC41\\uFE0F\\u200D\\uD83D\\uDDE8|\\uD83D\\uDC69(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC69\\u200D[\\u2695\\u2696\\u2708]|\\uD83D\\uDC68(?:(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D[\\u2695\\u2696\\u2708]|\\u200D[\\u2695\\u2696\\u2708]))\\uFE0F|\\uD83C\\uDDF2(?:\\uD83C[\\uDDE6\\uDDE8-\\uDDED\\uDDF0-\\uDDFF])|\\uD83D\\uDC69\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]|\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D(?:\\uD83D[\\uDC68\\uDC69])|\\uD83D[\\uDC68\\uDC69]))|\\uD83C\\uDDF1(?:\\uD83C[\\uDDE6-\\uDDE8\\uDDEE\\uDDF0\\uDDF7-\\uDDFB\\uDDFE])|\\uD83C\\uDDEF(?:\\uD83C[\\uDDEA\\uDDF2\\uDDF4\\uDDF5])|\\uD83C\\uDDED(?:\\uD83C[\\uDDF0\\uDDF2\\uDDF3\\uDDF7\\uDDF9\\uDDFA])|\\uD83C\\uDDEB(?:\\uD83C[\\uDDEE-\\uDDF0\\uDDF2\\uDDF4\\uDDF7])|[#\\*0-9]\\uFE0F\\u20E3|\\uD83C\\uDDE7(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEF\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9\\uDDFB\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDE6(?:\\uD83C[\\uDDE8-\\uDDEC\\uDDEE\\uDDF1\\uDDF2\\uDDF4\\uDDF6-\\uDDFA\\uDDFC\\uDDFD\\uDDFF])|\\uD83C\\uDDFF(?:\\uD83C[\\uDDE6\\uDDF2\\uDDFC])|\\uD83C\\uDDF5(?:\\uD83C[\\uDDE6\\uDDEA-\\uDDED\\uDDF0-\\uDDF3\\uDDF7-\\uDDF9\\uDDFC\\uDDFE])|\\uD83C\\uDDFB(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDEE\\uDDF3\\uDDFA])|\\uD83C\\uDDF3(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA-\\uDDEC\\uDDEE\\uDDF1\\uDDF4\\uDDF5\\uDDF7\\uDDFA\\uDDFF])|\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62(?:\\uDB40\\uDC77\\uDB40\\uDC6C\\uDB40\\uDC73|\\uDB40\\uDC73\\uDB40\\uDC63\\uDB40\\uDC74|\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67)\\uDB40\\uDC7F|\\uD83D\\uDC68(?:\\u200D(?:\\u2764\\uFE0F\\u200D(?:\\uD83D\\uDC8B\\u200D)?\\uD83D\\uDC68|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66\\u200D\\uD83D\\uDC66|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67\\u200D(?:\\uD83D[\\uDC66\\uDC67])|\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92])|(?:\\uD83C[\\uDFFB-\\uDFFF])\\u200D(?:\\uD83C[\\uDF3E\\uDF73\\uDF93\\uDFA4\\uDFA8\\uDFEB\\uDFED]|\\uD83D[\\uDCBB\\uDCBC\\uDD27\\uDD2C\\uDE80\\uDE92]))|\\uD83C\\uDDF8(?:\\uD83C[\\uDDE6-\\uDDEA\\uDDEC-\\uDDF4\\uDDF7-\\uDDF9\\uDDFB\\uDDFD-\\uDDFF])|\\uD83C\\uDDF0(?:\\uD83C[\\uDDEA\\uDDEC-\\uDDEE\\uDDF2\\uDDF3\\uDDF5\\uDDF7\\uDDFC\\uDDFE\\uDDFF])|\\uD83C\\uDDFE(?:\\uD83C[\\uDDEA\\uDDF9])|\\uD83C\\uDDEE(?:\\uD83C[\\uDDE8-\\uDDEA\\uDDF1-\\uDDF4\\uDDF6-\\uDDF9])|\\uD83C\\uDDF9(?:\\uD83C[\\uDDE6\\uDDE8\\uDDE9\\uDDEB-\\uDDED\\uDDEF-\\uDDF4\\uDDF7\\uDDF9\\uDDFB\\uDDFC\\uDDFF])|\\uD83C\\uDDEC(?:\\uD83C[\\uDDE6\\uDDE7\\uDDE9-\\uDDEE\\uDDF1-\\uDDF3\\uDDF5-\\uDDFA\\uDDFC\\uDDFE])|\\uD83C\\uDDFA(?:\\uD83C[\\uDDE6\\uDDEC\\uDDF2\\uDDF3\\uDDF8\\uDDFE\\uDDFF])|\\uD83C\\uDDEA(?:\\uD83C[\\uDDE6\\uDDE8\\uDDEA\\uDDEC\\uDDED\\uDDF7-\\uDDFA])|\\uD83C\\uDDFC(?:\\uD83C[\\uDDEB\\uDDF8])|(?:\\u26F9|\\uD83C[\\uDFCB\\uDFCC]|\\uD83D\\uDD75)(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:\\uD83C[\\uDFC3\\uDFC4\\uDFCA]|\\uD83D[\\uDC6E\\uDC71\\uDC73\\uDC77\\uDC81\\uDC82\\uDC86\\uDC87\\uDE45-\\uDE47\\uDE4B\\uDE4D\\uDE4E\\uDEA3\\uDEB4-\\uDEB6]|\\uD83E[\\uDD26\\uDD37-\\uDD39\\uDD3D\\uDD3E\\uDDD6-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2\\uDFC7]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66\\uDC67\\uDC70\\uDC72\\uDC74-\\uDC76\\uDC78\\uDC7C\\uDC83\\uDC85\\uDCAA\\uDD74\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE4C\\uDE4F\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD30-\\uDD36\\uDDD1-\\uDDD5])(?:\\uD83C[\\uDFFB-\\uDFFF])|\\uD83D\\uDC68(?:\\u200D(?:(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC67|(?:(?:\\uD83D[\\uDC68\\uDC69])\\u200D)?\\uD83D\\uDC66)|\\uD83C[\\uDFFB-\\uDFFF])|(?:[\\u261D\\u26F9\\u270A-\\u270D]|\\uD83C[\\uDF85\\uDFC2-\\uDFC4\\uDFC7\\uDFCA-\\uDFCC]|\\uD83D[\\uDC42\\uDC43\\uDC46-\\uDC50\\uDC66-\\uDC69\\uDC6E\\uDC70-\\uDC78\\uDC7C\\uDC81-\\uDC83\\uDC85-\\uDC87\\uDCAA\\uDD74\\uDD75\\uDD7A\\uDD90\\uDD95\\uDD96\\uDE45-\\uDE47\\uDE4B-\\uDE4F\\uDEA3\\uDEB4-\\uDEB6\\uDEC0\\uDECC]|\\uD83E[\\uDD18-\\uDD1C\\uDD1E\\uDD1F\\uDD26\\uDD30-\\uDD39\\uDD3D\\uDD3E\\uDDD1-\\uDDDD])(?:\\uD83C[\\uDFFB-\\uDFFF])?|(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDEEB\\uDEEC\\uDEF4-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])|(?:[#\\*0-9\\xA9\\xAE\\u203C\\u2049\\u2122\\u2139\\u2194-\\u2199\\u21A9\\u21AA\\u231A\\u231B\\u2328\\u23CF\\u23E9-\\u23F3\\u23F8-\\u23FA\\u24C2\\u25AA\\u25AB\\u25B6\\u25C0\\u25FB-\\u25FE\\u2600-\\u2604\\u260E\\u2611\\u2614\\u2615\\u2618\\u261D\\u2620\\u2622\\u2623\\u2626\\u262A\\u262E\\u262F\\u2638-\\u263A\\u2640\\u2642\\u2648-\\u2653\\u2660\\u2663\\u2665\\u2666\\u2668\\u267B\\u267F\\u2692-\\u2697\\u2699\\u269B\\u269C\\u26A0\\u26A1\\u26AA\\u26AB\\u26B0\\u26B1\\u26BD\\u26BE\\u26C4\\u26C5\\u26C8\\u26CE\\u26CF\\u26D1\\u26D3\\u26D4\\u26E9\\u26EA\\u26F0-\\u26F5\\u26F7-\\u26FA\\u26FD\\u2702\\u2705\\u2708-\\u270D\\u270F\\u2712\\u2714\\u2716\\u271D\\u2721\\u2728\\u2733\\u2734\\u2744\\u2747\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2763\\u2764\\u2795-\\u2797\\u27A1\\u27B0\\u27BF\\u2934\\u2935\\u2B05-\\u2B07\\u2B1B\\u2B1C\\u2B50\\u2B55\\u3030\\u303D\\u3297\\u3299]|\\uD83C[\\uDC04\\uDCCF\\uDD70\\uDD71\\uDD7E\\uDD7F\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE02\\uDE1A\\uDE2F\\uDE32-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF21\\uDF24-\\uDF93\\uDF96\\uDF97\\uDF99-\\uDF9B\\uDF9E-\\uDFF0\\uDFF3-\\uDFF5\\uDFF7-\\uDFFF]|\\uD83D[\\uDC00-\\uDCFD\\uDCFF-\\uDD3D\\uDD49-\\uDD4E\\uDD50-\\uDD67\\uDD6F\\uDD70\\uDD73-\\uDD7A\\uDD87\\uDD8A-\\uDD8D\\uDD90\\uDD95\\uDD96\\uDDA4\\uDDA5\\uDDA8\\uDDB1\\uDDB2\\uDDBC\\uDDC2-\\uDDC4\\uDDD1-\\uDDD3\\uDDDC-\\uDDDE\\uDDE1\\uDDE3\\uDDE8\\uDDEF\\uDDF3\\uDDFA-\\uDE4F\\uDE80-\\uDEC5\\uDECB-\\uDED2\\uDEE0-\\uDEE5\\uDEE9\\uDEEB\\uDEEC\\uDEF0\\uDEF3-\\uDEF8]|\\uD83E[\\uDD10-\\uDD3A\\uDD3C-\\uDD3E\\uDD40-\\uDD45\\uDD47-\\uDD4C\\uDD50-\\uDD6B\\uDD80-\\uDD97\\uDDC0\\uDDD0-\\uDDE6])\\uFE0F)/;", "export let plot = \n`1301\n*\nSo, Detective, what will be my first task as your Assistant?\nHmm hmm hmm yes! See this board? It's so called Evidence Board, also known as the MURDER MAP!\nEeek!\nDo not fret. It's mostly harmless. It just helps me to visualise evidence I have and connections between the pieces of it.\nLooks messy.\nIndeed! And this is where you come into picture. You will help me to untangle it. Move pieces around, so strings stop crossing over cards.\nHmm, I guess I can do that. Anything else?\nAlso, in the end, all cards should be on the board. But you can temporarily move them to the sides. That's it.\nOK, I think I can do it.\nNote to player - with the Space key you can skip all the talks at once, or restart whole dialog anew.\n=160\nYou was a great help last time.\nI have just moved some paper around.\nAnd did it splendidly! Now I have another task for you.\nLet me guess...\nYes! Another tangled board to untangle.\nWill it teach me how to solve cases?\nIt will teach you to untangle strings!\nSigh... OK.\n=26560\nAaaand... another board!\nAt least this time I actually have helped to add some pieces to it.\nYes! Pieces that have added a lot of new strings to untangle!\nYay, I guess.\n=265801\n*\nSo. Many. Strings.\nYes. It's all connected. \nWill it make solving it harder or easier?\nWe'll see. Will it make placing it easier?\nWe'll see. I'm not sure it's even possible.\n=37070645\nAre you sure it's them?\nYes. A little African country in the centre of EVERYTHING.\nIt will be hard to prove it.\nFitting this all on board will be hard too. Maybe we need a bigger board?\nDo not slack. This one is enough.\n=100\nSo, this is it. Sorry, no big final.\nYou can use numbers 1-5 to jump to level. \nOr press 6 to get here and then input numbers up there \u2196 to enter any number to generate a custom level.\nDigits 2-3 set density of cards (in percents)\nIf the first digit is 2, it uses different generation, that (hopefully) guarantees solvability. \nAlso in that case digits 4-5 define density of links\nFirst digit 3 is like 2, but then digits 6-7 are coords of the \"hub\" cell that will have a lot of connections, if it is a landmark.\nThat's it! Thanks for playing. \nPlease leave feedback. Maybe ideas for beter plots or gameplay variations.\n`", "import { emogiRegEx, randomElement, RNG, rng, shuffle } from \"./util\";\r\nimport { plot } from \"./plot\"\r\n\r\ndeclare const\r\n  Table: HTMLDivElement,\r\n  Board: HTMLDivElement,\r\n  CST: HTMLDivElement,\r\n  Talk: HTMLDivElement,\r\n  Char: HTMLDivElement,\r\n  Pins: HTMLDivElement,\r\n  StringsPath: SVGPathElement,\r\n  StringsWrongPath: SVGPathElement,\r\n  HighlightPath: SVGPathElement,\r\n  Input: HTMLInputElement\r\n{\r\n  type V2 = { x: number, y: number };\r\n  const v2 = (x: number, y: number) => ({ x, y })\r\n  const sum = (a: V2, b: V2) => ({ x: a.x + b.x, y: a.y + b.y })\r\n  const sub = (a: V2, b: V2) => ({ x: a.x - b.x, y: a.y - b.y })\r\n  const dist = (a: V2, b: V2) => length(sub(a, b));\r\n  const length = (a: V2) => (a.x ** 2 + a.y ** 2) ** 0.5;\r\n\r\n\r\n  let levels = plot.split(\"=\").map(s => s.trim().split(\"\\n\"));\r\n  let seed;\r\n  let level;\r\n  let line = 1;\r\n  let leveln = 0;\r\n  let maxLevel = 0;\r\n  let win = false;\r\n  const FinalLevel = 5;\r\n\r\n  const slots: HTMLDivElement[] = [];\r\n  let cards: { [id: string]: Card } = {};\r\n  let links: Link[] = [];\r\n  let board: Card[] = [];\r\n  let slotn = 0;\r\n\r\n  const columns = 12, rows = 6, totalSlots = columns * rows;\r\n\r\n  class Link {\r\n    ap: V2;\r\n    bp: V2;\r\n    cp: V2;\r\n    a: Card;\r\n    b: Card;\r\n    length: number;\r\n\r\n    constructor(aId: string, bId: string) {\r\n      this.a = cards[aId];\r\n      this.b = cards[bId];\r\n      links.push(this);\r\n    }\r\n\r\n    update(ap: V2, bp: V2) {\r\n      this.ap = ap;\r\n      this.bp = bp;\r\n      this.length = this.a.slot != null && this.b.slot != null ? dist(idToCoord(this.a.slot), idToCoord(this.b.slot)) : 0;\r\n      this.cp = v2(ap.x / 2 + bp.x / 2, ap.y / 2 + bp.y / 2 + Math.min(100, Math.abs(ap.x - bp.x) * 0.3));\r\n    }\r\n\r\n    curve(t: number) {\r\n      let { ap, bp, cp } = this;\r\n      let v = (1 - t) ** 2, w = t ** 2\r\n      return v2(cp.x + v * (ap.x - cp.x) + w * (bp.x - cp.x), cp.y + v * (ap.y - cp.y) + w * (bp.y - cp.y));\r\n    }\r\n\r\n    toPath() {\r\n      let { ap, bp, cp } = this;\r\n      let covered = this.overlapping()\r\n      return [covered, `M${ap.x} ${ap.y} Q${cp.x} ${cp.y} ${bp.x} ${bp.y}`, this] as [Card, string, Link];\r\n    }\r\n\r\n    overlapping() {\r\n\r\n      if (slotDistance(this.a.slot, this.b.slot) < 2)\r\n        return null;\r\n\r\n      let steps = this.length*2;\r\n      for (let i = 1; i < steps - 1; i++) {\r\n        let p = this.curve(i / steps);\r\n        for (let c of allCards()) {\r\n          if (c == this.a || c == this.b)\r\n            continue;\r\n          if (c.contains(p))\r\n            return c;\r\n        }\r\n      }\r\n      return null;\r\n    }\r\n\r\n  }\r\n\r\n  class Generator {\r\n    shuffled = shuffle(photos, rng);\r\n    shuffledEvidence = shuffle(evidence, rng);\r\n\r\n    constructor() {\r\n    }\r\n\r\n    nextCard(slot?: number, type?: string) {\r\n      let id: string;\r\n      if (slot != null && landmarkIn[slot] && rng(3) == 0 || type == \"lm\") {\r\n        id = landmarkIn[slot].icon;\r\n        type = \"lm\";\r\n      } else {\r\n        type = type || randomElement([\"ev\", \"po\", \"np\", \"nt\", \"st\"]);\r\n        id = (type == \"ev\" ? this.shuffledEvidence : this.shuffled).pop();\r\n      }\r\n      return { type, id };\r\n    }\r\n\r\n    simpleCards(chance: number, guaranteed?: number) {\r\n      let cards = []\r\n      let slots = shuffle([...new Array(totalSlots)].map((_, i) => i), rng);\r\n      slots = slots.slice(0, ~~(totalSlots * chance));\r\n      if (guaranteed && !slots.includes(guaranteed))\r\n        slots.push(guaranteed);\r\n      slots = slots.sort();\r\n      for (let slot of slots) {\r\n        let { type, id } = this.nextCard(slot, slot == guaranteed && landmarkIn[slot] && \"lm\");\r\n        if (id)\r\n          cards.push({ id, type, slot })\r\n      }\r\n      return cards;\r\n    }\r\n\r\n    neighborLinks(cards: any[], linkChance: number, hub?: number) {\r\n      let b: string[] = [];\r\n      let links: [string, string][] = [];\r\n      for (let c of cards)\r\n        b[c.slot] = c.id;\r\n\r\n      for (let slot = 0; slot < totalSlots - columns; slot++) {\r\n        if (!b[slot])\r\n          continue;\r\n        if ((slot + 1) % columns == 0)\r\n          continue;\r\n        for (let other of [1, columns, 1 + columns]) {\r\n          if (b[slot] && b[slot + other] && other && (hub == slot || hub == slot + other))\r\n            links.push([b[slot], b[slot + other]]);\r\n        }\r\n\r\n        if (rng() < linkChance && b[slot + 1])\r\n          links.push([b[slot], b[slot + 1]]);\r\n        if (rng() < linkChance && b[slot + columns])\r\n          links.push([b[slot], b[slot + columns]]);\r\n        if (rng() < linkChance && b[slot + columns + 1])\r\n          links.push([b[slot], b[slot + columns + 1]]);\r\n        if (slot % columns > 0 && rng() < linkChance && b[slot + columns - 1])\r\n          links.push([b[slot], b[slot + columns - 1]]);\r\n      }\r\n      return links;\r\n    }\r\n\r\n    randomLinks(cards: { id: string }[]) {\r\n      let links: [string, string][] = [];\r\n      for (let c1 of cards.map(c => c.id)) {\r\n        let c2 = randomElement(cards).id;\r\n        if (c1 != c2 && !links.find(l => l[0] == c1 && l[1] == c2 || l[1] == c1 && l[0] == c2)) {\r\n          links.push([c1, c2]);\r\n        }\r\n      }\r\n      return links;\r\n    }\r\n\r\n    generate(lseed: string) {\r\n      RNG(Number(lseed));\r\n      console.log({ seed: lseed });\r\n      let density = Number(lseed.substring(1, 3)) / 100 || 0;\r\n      let density2 = Number(lseed.substring(3, 5)) / 100;\r\n      let landmark = Number(lseed[5])-1 + (Number(lseed[6])-1)*columns;\r\n      let cards, links;\r\n      switch (lseed[0]) {\r\n        case \"2\":\r\n          cards = this.simpleCards(density);\r\n          links = this.neighborLinks(cards, density2);\r\n          cards = shuffleSlots(cards);\r\n          break;\r\n        case \"3\":\r\n          cards = this.simpleCards(density, landmark);\r\n          links = this.neighborLinks(cards, density2, landmark);\r\n          cards = shuffleSlots(cards);\r\n          break;\r\n        default:\r\n          cards = this.simpleCards(density);\r\n          links = this.randomLinks(cards);\r\n          break;\r\n      }\r\n\r\n      return { cards, links, seed: lseed };\r\n    }\r\n\r\n\r\n  }\r\n\r\n  class Card {\r\n    div: HTMLDivElement;\r\n    id: string;\r\n    type: string;\r\n    slot: number;\r\n    points: V2[] = [];\r\n    at: V2;\r\n    r: DOMRect;\r\n\r\n    constructor({ id, type, slot, at }) {\r\n      let div: HTMLDivElement;\r\n      type = type || \"po\";\r\n      this.type = type;\r\n      this.id = id;\r\n\r\n      div = document.createElement(\"div\")\r\n      if (type == \"lm\") {\r\n        let m = landmarks.find(lm => lm.icon == id)\r\n        div.style.marginLeft = `calc(-2rem + ${fract(m.x / 100 * columns) * 100}%)`;\r\n        div.style.marginTop = `calc(-1.5rem + ${fract(m.y / 100 * rows) * 100}%)`;\r\n        div.innerHTML = \"O\";\r\n        div.style.fontSize = `${rng(4) + 3}rem;`\r\n        div.classList.add(\"lm\", type);\r\n      } else {\r\n        div.classList.add(\"card\", type);\r\n        if (!rng(4))\r\n          div.classList.add(\"warp\");\r\n        let rot = rng() * 6 - 3;\r\n        div.style.transform = `translate(${rng() * 10 - 5}px, ${rng() * 10 - 5}px) rotate(${rot}deg)`\r\n        div.style.width = type == \"nt\" ? `${rng() * 0.5 + 1}em` : \"\";\r\n        div.draggable = true;\r\n        div.ondragstart = e => e.dataTransfer.setData(\"text\", id);\r\n        let words = { po: 3, np: 150, nt: 3 }[type] || 0;\r\n        let title = { np: 1, st: 3 }[type] || 0;\r\n        let columns = { np: rng(2) + 1 }[type];\r\n        let float = type == \"np\" && randomElement([\"left\", \"right\", \"center\"]);\r\n        let paper = type != \"ev\" && type != \"do\";\r\n        let style = `background:hsla(${rng(360)}, 50%, 10%, ${paper ? 100 : 0}%); \r\n        float: ${float}; ${float == \"center\" ? \"width:100%;\" : \"\"};`;\r\n        if (type == \"ev\") {\r\n          let evInd = evidence.indexOf(id);\r\n          style += `transform: rotateZ(${evInd < 4 ? -45 : evInd < 7 ? 45 : 0}deg);`\r\n        }\r\n        let mark = paper && rng(8) == 0;\r\n        div.innerHTML = `\r\n        <div class=\"note\" style=\"columns: ${columns};\">\r\n          ${title > 0 ? `<h1>${randomText(rng(title) + title)}</h1>` : \"\"}\r\n          <div class=\"${type == \"nt\" && [\"invert\", \"green\", \"gray\"][rng(10)]} photo\" style=\"${style}\">\r\n            ${id}\r\n          </div>\r\n          <span style=\"transform:rotate(${-rot + rng() * 3 - 1.5}deg)\">${randomText(rng(~~(words / 3)) + words)}</span>\r\n        </div>\r\n        <div class=\"overlay\">${mark ? \"\u2718\u2718!?\"[rng(4)] : type == \"do\" ? \"\" : \"\"}</div>`;\r\n        if (paper)\r\n          div.style.background = `hsl(${rng(360)}, ${type == \"st\" ? 100 : 20}%, 90%)`;\r\n      }\r\n      this.div = div;\r\n      div.id = id;\r\n      div.onmouseenter = () => highlightNeighbors(div);\r\n      div.onmouseleave = () => highlightNeighbors(null);\r\n      div.setAttribute(\"type\", type);\r\n\r\n      cards[id] = this;\r\n\r\n      this.addToSlot(slot);\r\n      this.setAt(at);\r\n      this.recalculate();\r\n    }\r\n\r\n    recalculate() {\r\n      let r = this.div.getBoundingClientRect();\r\n      this.at = v2(r.left, r.top);\r\n      this.r = r;\r\n\r\n      for (let i = 0; i < 4; i++) {\r\n        let margin = 10;\r\n        let p: V2;\r\n        if (this.type == \"lm\") {\r\n          p = v2(r.width / 2, r.height / 2);\r\n        } else {\r\n\r\n          p = v2(i % 2 == 1 ? r.width - margin : margin,\r\n            i < 2 ? margin : r.height - (this.type == \"nt\" ? 0 : margin))\r\n        }\r\n        if (this.type == \"ev\") {\r\n          p[4] = v2(r.width / 2, 20);\r\n        }\r\n        this.points[i] = p;\r\n      }\r\n    }\r\n\r\n    setAt(at) {\r\n      if (at) {\r\n        this.div.style.left = at[0];\r\n        this.div.style.top = at[1];\r\n      }\r\n    }\r\n\r\n    move(slot: number, x: number, y: number) {\r\n      if (this.type == \"lm\")\r\n        return;\r\n\r\n      if (slot != null && board[slot] != null) {\r\n        let other = board[slot];\r\n        if (other.type == \"lm\")\r\n          return;\r\n        other.addToSlot(this.slot);\r\n        other.div.style.left = this.div.style.left;\r\n        other.div.style.top = this.div.style.top;\r\n      }\r\n\r\n      this.addToSlot(slot);\r\n      this.div.style.left = `${x - this.div.getBoundingClientRect().width / 2}px`;\r\n      this.div.style.top = `${y - this.div.getBoundingClientRect().height / 2}px`;\r\n    }\r\n\r\n    addToSlot(slot: number) {\r\n\r\n      (slot == null ? Table : slots[slot]).appendChild(this.div);\r\n      if (this.slot != null && board[this.slot] == this)\r\n        delete board[this.slot];\r\n      this.slot = slot;\r\n      if (slot != null)\r\n        board[slot] = this;\r\n    }\r\n\r\n\r\n    point(ind: number) {\r\n      return sum(this.points[ind], this.at);\r\n    }\r\n\r\n    contains(p: V2) {\r\n      return this.at.x <= p.x && this.at.y <= p.y && this.at.x + this.r.width >= p.x && this.at.y + this.r.height >= p.y;\r\n    }\r\n  }\r\n\r\n  function allCards() {\r\n    return Object.values(cards);\r\n  }\r\n\r\n  function bp(card: Card, other: Card): V2 {\r\n    let pointInd = (other.at.x > card.at.x + 10 ? 1 : 0) + (other.at.y > card.at.y + 10 ? 2 : 0);\r\n    return card.point(pointInd);;\r\n  }\r\n\r\n\r\n  let update = (t: number) => {\r\n    window.requestAnimationFrame(update)\r\n  }\r\n\r\n  update(0);\r\n\r\n  window.onmousemove = e => { }\r\n\r\n  window.onwheel = e => { };\r\n\r\n  function splitEmojis(t): string[] {\r\n    return t.split(emogiRegEx).filter(a => a && a != ' ');\r\n  }\r\n\r\n  function fract(n: number) {\r\n    return n - ~~n;\r\n  }\r\n\r\n  function splitLandmarks(t) {\r\n    let array = t.split(\" \");\r\n    let r = [];\r\n    const chunkSize = 3;\r\n    for (let i = 0; i < array.length; i += chunkSize) {\r\n      r.push({ icon: array[i], x: array[i + 1] - 8, y: array[i + 2] - 12 });\r\n    }\r\n    let html = \"<div id=WorldIcon>\uD83D\uDDFA</div>\";\r\n    for (let m of r) {\r\n      m.cell = ~~(m.x / 100 * columns) + ~~((m.y + 3) / 100 * rows) * columns;\r\n      landmarkIn[m.cell] = m;\r\n      html += `<div class=\"lmi\" id=${m.icon} style=\"left:${m.x}%;top:${m.y}%;\">${m.icon}</div>`\r\n    }\r\n    document.getElementById(\"World\").innerHTML = html;\r\n\r\n    return r;\r\n  }\r\n\r\n  for (let i = 0; i < columns * rows; i++) {\r\n    addSlot();\r\n  }\r\n\r\n  const photos = splitEmojis(\"\uD83E\uDD35\uD83D\uDC70\uD83E\uDD31\uD83D\uDC68\u200D\u2695\uFE0F\uD83D\uDC69\u200D\u2695\uFE0F\uD83D\uDC68\u200D\uD83C\uDF93\uD83D\uDC69\u200D\uD83C\uDF93\uD83D\uDC68\u200D\u2696\uFE0F\uD83D\uDC69\u200D\u2696\uFE0F\uD83D\uDC68\u200D\uD83C\uDF3E\uD83D\uDC69\u200D\uD83C\uDF3E\uD83D\uDC68\u200D\uD83C\uDF73\uD83D\uDC69\u200D\uD83C\uDF73\uD83D\uDC68\u200D\uD83D\uDD27\uD83D\uDC69\u200D\uD83D\uDD27\uD83D\uDC68\u200D\uD83C\uDFED\uD83D\uDC69\u200D\uD83C\uDFED\uD83D\uDC68\u200D\uD83D\uDCBC\uD83D\uDC69\u200D\uD83D\uDCBC\uD83D\uDC68\u200D\uD83D\uDD2C\uD83D\uDC69\u200D\uD83D\uDD2C\uD83D\uDC68\u200D\uD83D\uDCBB\uD83D\uDC69\u200D\uD83D\uDCBB\uD83D\uDC68\u200D\uD83C\uDFA4\uD83D\uDC69\u200D\uD83C\uDFA4\uD83D\uDC68\u200D\uD83C\uDFA8\uD83D\uDC69\u200D\uD83C\uDFA8\uD83D\uDC68\u200D\u2708\uFE0F\uD83D\uDC69\u200D\u2708\uFE0F\uD83D\uDC68\u200D\uD83D\uDE80\uD83D\uDC69\u200D\uD83D\uDE80\uD83D\uDC68\u200D\uD83D\uDE92\uD83D\uDC69\u200D\uD83D\uDE92\uD83D\uDC6E\u200D\u2642\uFE0F\uD83D\uDC6E\u200D\u2640\uFE0F\uD83D\uDD75\uFE0F\u200D\u2642\uFE0F\uD83D\uDD75\uFE0F\u200D\u2640\uFE0F\uD83D\uDC82\u200D\u2642\uFE0F\uD83D\uDC82\u200D\u2640\uFE0F\uD83D\uDC77\u200D\u2642\uFE0F\uD83D\uDC77\u200D\u2640\uFE0F\uD83E\uDDD9\u200D\u2640\uFE0F\uD83E\uDDD9\u200D\u2642\uFE0F\uD83E\uDDDA\u200D\u2640\uFE0F\uD83E\uDDDA\u200D\u2642\uFE0F\uD83E\uDDDB\u200D\u2640\uFE0F\uD83E\uDDDB\u200D\u2642\uFE0F\uD83E\uDDDC\u200D\u2640\uFE0F\uD83E\uDDDC\u200D\u2642\uFE0F\uD83E\uDDDD\u200D\u2640\uFE0F\uD83E\uDDDD\u200D\u2642\uFE0F\uD83E\uDDDE\u200D\u2640\uFE0F\uD83E\uDDDE\u200D\u2642\uFE0F\uD83E\uDDDF\u200D\u2640\uFE0F\uD83E\uDDDF\u200D\u2642\uFE0F\");\r\n  const evidence = splitEmojis(\"\uD83D\uDD2A\uD83D\uDDE1\uFE0F\uD83D\uDD11\uD83D\uDDDD\uFE0F\uD83D\uDD27\u270F\uFE0F\uD83D\uDD8B\uFE0F\uD83C\uDF80\uD83D\uDCFF\uD83D\uDCF1\uD83D\uDCBE\uD83D\uDCC0\uD83D\uDCFC\uD83D\uDCD3\uD83D\uDCD2\uD83D\uDCB5\u2702\uFE0F\u2699\uFE0F\uD83E\uDE92\uD83D\uDCF0\u2709\uFE0F\uD83D\uDDC2\uFE0F\uD83E\uDDE7\");\r\n  const landmarkIn = {};\r\n  const landmarks = splitLandmarks(\"\uD83D\uDDFD 38 52 \uD83C\uDF0B 79 74 \uD83C\uDFEF 86 54 \uD83D\uDD4B 63 58 \uD83D\uDED5 71 65 \uD83C\uDF01 61 40 \uD83D\uDD4C 68 51 \u26EA 43 85 \uD83D\uDD4D 80 52 \uD83D\uDEA2 96 70 \uD83C\uDF09 27 52 \u26F2 54 66 \uD83E\uDD8F 60 85 \uD83E\uDD98 87 86 \uD83E\uDDCA 45 23\");\r\n\r\n  const words = Object.keys(window).filter(w => w.length < 10);\r\n\r\n  function randomText(len: number = 0) {\r\n    return len ? [...new Array(len)].map(v => randomElement(words)).join(\" \") : \"\"\r\n  }\r\n\r\n  function addSlot() {\r\n    let slot = document.createElement(\"div\")\r\n    slot.classList.add(\"slot\");\r\n    slot.id = slotn++ as any;\r\n    slots[slot.id] = slot;\r\n    makeDroppable(slot);\r\n    Board.appendChild(slot);\r\n  }\r\n\r\n  let preventDoubleDrop = false;\r\n\r\n  function makeDroppable(div: HTMLDivElement) {\r\n    div.ondragover = e => e.preventDefault();\r\n    div.ondrop = e => {\r\n      e.preventDefault();\r\n      if (preventDoubleDrop) {\r\n        preventDoubleDrop = false;\r\n        return;\r\n      }\r\n      let data = e.dataTransfer.getData(\"text\");\r\n      let slotId = div.id == \"Table\" ? null : div.id as any;\r\n      if (slotId != null)\r\n        preventDoubleDrop = true;\r\n      let card = cards[data];\r\n      card.move(slotId, e.clientX, e.clientY);\r\n      relink();\r\n    }\r\n  }\r\n\r\n\r\n  function connectedTo(card: Card) {\r\n    let cc = links.map(l => l.a == card ? l.b : l.b == card ? l.a : null).filter(c => c);\r\n    return cc;\r\n  }\r\n\r\n  function connectedLinks(card: Card) { return links.filter(l => l.a == card || l.b == card) }\r\n\r\n  function highlightNeighbors(cardDiv) {\r\n    let card = cards[cardDiv?.id];\r\n    for (let c of allCards())\r\n      if (c.slot)\r\n        slots[c.slot].classList.remove(\"hl\");\r\n    if (card)\r\n      for (let connected of connectedTo(card))\r\n        if (connected.slot)\r\n          slots[connected.slot].classList.add(\"hl\")\r\n    relink(connectedLinks(card));\r\n  }\r\n\r\n\r\n  function relink(highlighted: Link[] = []) {\r\n    for (let c of allCards())\r\n      c.recalculate();\r\n\r\n    links.forEach(l => l.update(bp(l.a, l.b), bp(l.b, l.a)));\r\n\r\n    Pins.innerHTML = links.map(l => [l.ap, l.bp]).flat().map(v =>\r\n      `<div class=\"pin\" style=\"left:${v.x - 3}px;top:${v.y - 7}px\">\uD83D\uDCCD</div>`\r\n    ).join(\" \");\r\n\r\n    let path = links.map(l => l.toPath());\r\n\r\n    win = (level < 5 || seed != \"100\") && path.every(p => !p[0]) && allCards().every(c => c.slot != null);\r\n\r\n    StringsPath.setAttribute(\"d\", path.filter(v => !v[0]).map(v => v[1]).join(\" \"));\r\n    StringsWrongPath.setAttribute(\"d\", path.filter(v => v[0]).map(v => v[1]).join(\" \"));\r\n    HighlightPath.setAttribute(\"d\", path.filter(v => highlighted.includes(v[2])).map(v => v[1]).join(\" \"));\r\n    savePosition();\r\n    showLine();\r\n  }\r\n\r\n  function shuffleSlots(cards: { slot: number, type: string }[]) {\r\n    for (let card of cards) {\r\n      if (card.type == \"lm\")\r\n        continue;\r\n      let other = randomElement(cards);\r\n      if (other.type == \"lm\")\r\n        continue;\r\n      let s = other.slot;\r\n      other.slot = card.slot;\r\n      card.slot = s;\r\n    }\r\n    return cards;\r\n  }\r\n\r\n  function initPosition(s: number) {\r\n    RNG(s);\r\n    let p = new Generator().generate(s.toString());\r\n    loadPosition(p)\r\n  }\r\n\r\n  function divPosition(div: HTMLDivElement) {\r\n    return [div.style.left, div.style.top];\r\n  }\r\n\r\n  function savePosition() {\r\n    let data = {\r\n      seed,\r\n      leveln,\r\n      line,\r\n      maxLevel,\r\n      cards: allCards().map(c => ({\r\n        id: c.id,\r\n        type: c.type,\r\n        slot: c.slot,\r\n        at: divPosition(c.div)\r\n      })),\r\n      links: links.map(l => [l.a.id, l.b.id])\r\n    }\r\n    localStorage.mumamo = JSON.stringify(data);\r\n  }\r\n\r\n  function loadPosition(data) {\r\n    for(let c of allCards()){\r\n      c.div.remove();\r\n    }\r\n    cards = {};\r\n    links = [];\r\n    board = [];\r\n    if (data.line != null)\r\n      line = data.line;\r\n    if (data.maxLevel != null)\r\n      maxLevel = data.maxLevel;\r\n    if (data.leveln != null)\r\n      leveln = data.leveln;\r\n    if (data.seed != null)\r\n      seed = data.seed;\r\n    level = levels[leveln];\r\n    for (let s of slots) {\r\n      s.innerHTML = \"\";\r\n    }\r\n    RNG(seed);\r\n    console.log(\"R\", data.seed, rng(10));\r\n    for (let c of data.cards)\r\n      new Card(c);\r\n    for (let l of removeDuplicateLinks(data.links))\r\n      new Link(l[0], l[1]);\r\n    relink();\r\n    Input.value = seed;\r\n  }\r\n\r\n\r\n  window.onresize = () => relink();\r\n  window.onkeydown = (e: KeyboardEvent) => {\r\n    if (e.target == Input) {\r\n      if(leveln != FinalLevel){\r\n        e.preventDefault();\r\n        return;      \r\n      }\r\n\r\n      setTimeout(() => {\r\n        Input.value = Input.value.replace(/[^0-9.]/g, '').replace(/(\\..*?)\\..*/g, '$1');\r\n        if(Input.value.length>=3){\r\n          initPosition(Number(Input.value));      \r\n        }\r\n      }, 1);\r\n    } else {\r\n      if (e.code.substring(0, 5) == \"Digit\") {\r\n        playLevel(Number(e.key) - 1);\r\n      }\r\n      if(e.key == \" \"){\r\n        line = line==level.length?1:level.length;\r\n        showLine();\r\n      }      \r\n    }\r\n  }\r\n\r\n  function playLevel(n) {\r\n    if(n>FinalLevel)\r\n      return;\r\n    leveln = n;\r\n    level = levels[n];\r\n    line = 1;\r\n    seed = Number(level[0]);\r\n    initPosition(seed);    \r\n  }\r\n\r\n  function showLine(increment = false) {\r\n    if (increment)\r\n      line++;\r\n    if (level[line] == \"*\")\r\n      line++;\r\n    Char.innerHTML = line % 2 ? \"\uD83D\uDD75\uFE0F\" : \"\uD83D\uDD75\uFE0F\u200D\u2640\uFE0F\";\r\n    CST.innerHTML = win ? \"<div class='WD'>Well done!</div>\" : level[line];\r\n    Talk.style.display = line >= level.length && !win ? \"none\" : \"flex\";\r\n    savePosition();\r\n    Input.style.pointerEvents = leveln == FinalLevel?\"all\":\"none\";    \r\n    Input.style.border =  leveln == FinalLevel?\"\":\"none\";\r\n  }\r\n\r\n  function removeDuplicateLinks(links: [string, string][]) {\r\n    let h = {};\r\n    for (let l of links)\r\n      h[l[0] + l[1]] = l;\r\n    return Object.values(h);\r\n  }\r\n\r\n  function idToCoord(id: number) {\r\n    return { x: id % columns, y: ~~(id / columns) }\r\n  }\r\n\r\n  function slotDistance(a: number, b: number) {\r\n    return dist(idToCoord(a), idToCoord(b));\r\n  }\r\n\r\n  Talk.onclick = () => {\r\n    if (win && leveln < levels.length - 1)\r\n      playLevel(leveln + 1);\r\n    else\r\n      showLine(true);\r\n  }\r\n\r\n  makeDroppable(Table)\r\n\r\n  if (localStorage.mumamo) {\r\n    loadPosition(JSON.parse(localStorage.mumamo));\r\n    showLine();\r\n  } else {\r\n    playLevel(0);\r\n  }\r\n\r\n\r\n\r\n}"],
  "mappings": ";;AAAA,MAAM,OAAO,KAAK;AACX,MAAI;AAEJ,WAAS,IAAI,MAAuC;AACzD,QAAI,QAAQ;AACV,aAAO,KAAK,OAAO;AACrB,QAAI,IAAI,QAAQ,OAAO;AACrB,aAAO,CAAC,EAAE,OAAO;AAEnB,QAAI,OAAO,CAAC,MAAM;AAChB,cAAQ,OAAQ,OAAO,QAAS,cAAc;AAAA,IAChD;AAEA,UAAM,CAAC,MAAM;AACX,aAAO,KAAK,KAAK,OAAO,KAAK,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,CAAC;AAAA,IAChE;AACA,WAAO;AAAA,EACT;AAEO,WAAS,cAAc,MAAa,MAAM,KAAK;AACpD,QAAI,CAAC;AACH,aAAO;AACT,QAAI,IAAI,IAAI,KAAK,MAAM;AACvB,WAAO,KAAK;AAAA,EACd;AAEO,WAAS,QAAQ,KAAYA,MAAK;AAEvC,UAAM,CAAC,GAAG,GAAG;AACb,QAAI,IAAI,IAAI;AACZ,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,UAAI,IAAIA,KAAI,CAAC;AACb,UAAI,KAAK,GAAG;AACV,SAAC,IAAI,IAAI,IAAI,EAAE,IAAI;AAAA,UACjB,IAAI;AAAA,UAAI,IAAI;AAAA,QAAE;AAAA,MAClB;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAGO,MAAM,aAAa;;;AC1CnB,MAAI,OACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACaA;AA8TE,QAAS,WAAT,WAAoB;AAClB,aAAO,OAAO,OAAO,KAAK;AAAA,IAC5B,GAES,KAAT,SAAY,MAAY,OAAiB;AACvC,UAAI,YAAY,MAAM,GAAG,IAAI,KAAK,GAAG,IAAI,KAAK,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,GAAG,IAAI,KAAK,IAAI;AAC1F,aAAO,KAAK,MAAM,QAAQ;AAAE;AAAA,IAC9B,GAaS,cAAT,SAAqB,GAAa;AAChC,aAAO,EAAE,MAAM,UAAU,EAAE,OAAO,OAAK,KAAK,KAAK,GAAG;AAAA,IACtD,GAES,QAAT,SAAe,GAAW;AACxB,aAAO,IAAI,CAAC,CAAC;AAAA,IACf,GAES,iBAAT,SAAwB,GAAG;AACzB,UAAI,QAAQ,EAAE,MAAM,GAAG;AACvB,UAAI,IAAI,CAAC;AACT,YAAM,YAAY;AAClB,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK,WAAW;AAChD,UAAE,KAAK,EAAE,MAAM,MAAM,IAAI,GAAG,MAAM,IAAI,KAAK,GAAG,GAAG,MAAM,IAAI,KAAK,GAAG,CAAC;AAAA,MACtE;AACA,UAAI,OAAO;AACX,eAAS,KAAK,GAAG;AACf,UAAE,OAAO,CAAC,EAAE,EAAE,IAAI,MAAM,WAAW,CAAC,GAAG,EAAE,IAAI,KAAK,MAAM,QAAQ;AAChE,mBAAW,EAAE,QAAQ;AACrB,gBAAQ,uBAAuB,EAAE,oBAAoB,EAAE,UAAU,EAAE,QAAQ,EAAE;AAAA,MAC/E;AACA,eAAS,eAAe,OAAO,EAAE,YAAY;AAE7C,aAAO;AAAA,IACT,GAaS,aAAT,SAAoB,MAAc,GAAG;AACnC,aAAO,MAAM,CAAC,GAAG,IAAI,MAAM,GAAG,CAAC,EAAE,IAAI,OAAK,cAAc,KAAK,CAAC,EAAE,KAAK,GAAG,IAAI;AAAA,IAC9E,GAES,UAAT,WAAmB;AACjB,UAAI,OAAO,SAAS,cAAc,KAAK;AACvC,WAAK,UAAU,IAAI,MAAM;AACzB,WAAK,KAAK;AACV,YAAM,KAAK,MAAM;AACjB,oBAAc,IAAI;AAClB,YAAM,YAAY,IAAI;AAAA,IACxB,GAIS,gBAAT,SAAuB,KAAqB;AAC1C,UAAI,aAAa,OAAK,EAAE,eAAe;AACvC,UAAI,SAAS,OAAK;AAChB,UAAE,eAAe;AACjB,YAAI,mBAAmB;AACrB,8BAAoB;AACpB;AAAA,QACF;AACA,YAAI,OAAO,EAAE,aAAa,QAAQ,MAAM;AACxC,YAAI,SAAS,IAAI,MAAM,UAAU,OAAO,IAAI;AAC5C,YAAI,UAAU;AACZ,8BAAoB;AACtB,YAAI,OAAO,MAAM;AACjB,aAAK,KAAK,QAAQ,EAAE,SAAS,EAAE,OAAO;AACtC,eAAO;AAAA,MACT;AAAA,IACF,GAGS,cAAT,SAAqB,MAAY;AAC/B,UAAI,KAAK,MAAM,IAAI,OAAK,EAAE,KAAK,OAAO,EAAE,IAAI,EAAE,KAAK,OAAO,EAAE,IAAI,IAAI,EAAE,OAAO,OAAK,CAAC;AACnF,aAAO;AAAA,IACT,GAES,iBAAT,SAAwB,MAAY;AAAE,aAAO,MAAM,OAAO,OAAK,EAAE,KAAK,QAAQ,EAAE,KAAK,IAAI;AAAA,IAAE,GAElF,qBAAT,SAA4B,SAAS;AACnC,UAAI,OAAO,MAAM,SAAS;AAC1B,eAAS,KAAK,SAAS;AACrB,YAAI,EAAE;AACJ,gBAAM,EAAE,MAAM,UAAU,OAAO,IAAI;AACvC,UAAI;AACF,iBAAS,aAAa,YAAY,IAAI;AACpC,cAAI,UAAU;AACZ,kBAAM,UAAU,MAAM,UAAU,IAAI,IAAI;AAAA;AAC9C,aAAO,eAAe,IAAI,CAAC;AAAA,IAC7B,GAGS,SAAT,SAAgB,cAAsB,CAAC,GAAG;AACxC,eAAS,KAAK,SAAS;AACrB,UAAE,YAAY;AAEhB,YAAM,QAAQ,OAAK,EAAE,OAAO,GAAG,EAAE,GAAG,EAAE,CAAC,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;AAEvD,WAAK,YAAY,MAAM,IAAI,OAAK,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,KAAK,EAAE;AAAA,QAAI,OACvD,gCAAgC,EAAE,IAAI,WAAW,EAAE,IAAI;AAAA,MACzD,EAAE,KAAK,GAAG;AAEV,UAAI,OAAO,MAAM,IAAI,OAAK,EAAE,OAAO,CAAC;AAEpC,aAAO,QAAQ,KAAK,QAAQ,UAAU,KAAK,MAAM,OAAK,CAAC,EAAE,EAAE,KAAK,SAAS,EAAE,MAAM,OAAK,EAAE,QAAQ,IAAI;AAEpG,kBAAY,aAAa,KAAK,KAAK,OAAO,OAAK,CAAC,EAAE,EAAE,EAAE,IAAI,OAAK,EAAE,EAAE,EAAE,KAAK,GAAG,CAAC;AAC9E,uBAAiB,aAAa,KAAK,KAAK,OAAO,OAAK,EAAE,EAAE,EAAE,IAAI,OAAK,EAAE,EAAE,EAAE,KAAK,GAAG,CAAC;AAClF,oBAAc,aAAa,KAAK,KAAK,OAAO,OAAK,YAAY,SAAS,EAAE,EAAE,CAAC,EAAE,IAAI,OAAK,EAAE,EAAE,EAAE,KAAK,GAAG,CAAC;AACrG,mBAAa;AACb,eAAS;AAAA,IACX,GAES,eAAT,SAAsBC,QAAyC;AAC7D,eAAS,QAAQA,QAAO;AACtB,YAAI,KAAK,QAAQ;AACf;AACF,YAAI,QAAQ,cAAcA,MAAK;AAC/B,YAAI,MAAM,QAAQ;AAChB;AACF,YAAI,IAAI,MAAM;AACd,cAAM,OAAO,KAAK;AAClB,aAAK,OAAO;AAAA,MACd;AACA,aAAOA;AAAA,IACT,GAES,eAAT,SAAsB,GAAW;AAC/B,UAAI,CAAC;AACL,UAAI,IAAI,IAAI,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC;AAC7C,mBAAa,CAAC;AAAA,IAChB,GAES,cAAT,SAAqB,KAAqB;AACxC,aAAO,CAAC,IAAI,MAAM,MAAM,IAAI,MAAM,GAAG;AAAA,IACvC,GAES,eAAT,WAAwB;AACtB,UAAI,OAAO;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,SAAS,EAAE,IAAI,QAAM;AAAA,UAC1B,IAAI,EAAE;AAAA,UACN,MAAM,EAAE;AAAA,UACR,MAAM,EAAE;AAAA,UACR,IAAI,YAAY,EAAE,GAAG;AAAA,QACvB,EAAE;AAAA,QACF,OAAO,MAAM,IAAI,OAAK,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC;AAAA,MACxC;AACA,mBAAa,SAAS,KAAK,UAAU,IAAI;AAAA,IAC3C,GAES,eAAT,SAAsB,MAAM;AAC1B,eAAQ,KAAK,SAAS,GAAE;AACtB,UAAE,IAAI,OAAO;AAAA,MACf;AACA,cAAQ,CAAC;AACT,cAAQ,CAAC;AACT,cAAQ,CAAC;AACT,UAAI,KAAK,QAAQ;AACf,eAAO,KAAK;AACd,UAAI,KAAK,YAAY;AACnB,mBAAW,KAAK;AAClB,UAAI,KAAK,UAAU;AACjB,iBAAS,KAAK;AAChB,UAAI,KAAK,QAAQ;AACf,eAAO,KAAK;AACd,cAAQ,OAAO;AACf,eAAS,KAAK,OAAO;AACnB,UAAE,YAAY;AAAA,MAChB;AACA,UAAI,IAAI;AACR,cAAQ,IAAI,KAAK,KAAK,MAAM,IAAI,EAAE,CAAC;AACnC,eAAS,KAAK,KAAK;AACjB,YAAI,KAAK,CAAC;AACZ,eAAS,KAAK,qBAAqB,KAAK,KAAK;AAC3C,YAAI,KAAK,EAAE,IAAI,EAAE,EAAE;AACrB,aAAO;AACP,YAAM,QAAQ;AAAA,IAChB,GA4BS,YAAT,SAAmB,GAAG;AACpB,UAAG,IAAE;AACH;AACF,eAAS;AACT,cAAQ,OAAO;AACf,aAAO;AACP,aAAO,OAAO,MAAM,EAAE;AACtB,mBAAa,IAAI;AAAA,IACnB,GAES,WAAT,SAAkB,YAAY,OAAO;AACnC,UAAI;AACF;AACF,UAAI,MAAM,SAAS;AACjB;AACF,WAAK,YAAY,OAAO,IAAI,oBAAQ;AACpC,UAAI,YAAY,MAAM,qCAAqC,MAAM;AACjE,WAAK,MAAM,UAAU,QAAQ,MAAM,UAAU,CAAC,MAAM,SAAS;AAC7D,mBAAa;AACb,YAAM,MAAM,gBAAgB,UAAU,aAAW,QAAM;AACvD,YAAM,MAAM,SAAU,UAAU,aAAW,KAAG;AAAA,IAChD,GAES,uBAAT,SAA8BC,QAA2B;AACvD,UAAI,IAAI,CAAC;AACT,eAAS,KAAKA;AACZ,UAAE,EAAE,KAAK,EAAE,MAAM;AACnB,aAAO,OAAO,OAAO,CAAC;AAAA,IACxB,GAES,YAAT,SAAmB,IAAY;AAC7B,aAAO,EAAE,GAAG,KAAK,SAAS,GAAG,CAAC,EAAE,KAAK,SAAS;AAAA,IAChD,GAES,eAAT,SAAsB,GAAW,GAAW;AAC1C,aAAO,KAAK,UAAU,CAAC,GAAG,UAAU,CAAC,CAAC;AAAA,IACxC;AApkBA,UAAM,KAAK,CAAC,GAAW,OAAe,EAAE,GAAG,EAAE;AAC7C,UAAM,MAAM,CAAC,GAAO,OAAW,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE;AAC5D,UAAM,MAAM,CAAC,GAAO,OAAW,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE;AAC5D,UAAM,OAAO,CAAC,GAAO,MAAU,OAAO,IAAI,GAAG,CAAC,CAAC;AAC/C,UAAM,SAAS,CAAC,OAAW,EAAE,KAAK,IAAI,EAAE,KAAK,MAAM;AAGnD,QAAI,SAAS,KAAK,MAAM,GAAG,EAAE,IAAI,OAAK,EAAE,KAAK,EAAE,MAAM,IAAI,CAAC;AAC1D,QAAI;AACJ,QAAI;AACJ,QAAI,OAAO;AACX,QAAI,SAAS;AACb,QAAI,WAAW;AACf,QAAI,MAAM;AACV,UAAM,aAAa;AAEnB,UAAM,QAA0B,CAAC;AACjC,QAAI,QAAgC,CAAC;AACrC,QAAI,QAAgB,CAAC;AACrB,QAAI,QAAgB,CAAC;AACrB,QAAI,QAAQ;AAEZ,UAAM,UAAU,IAAI,OAAO,GAAG,aAAa,UAAU;AAErD,UAAM,KAAK;AAAA,MAQT,YAAY,KAAa,KAAa;AACpC,aAAK,IAAI,MAAM;AACf,aAAK,IAAI,MAAM;AACf,cAAM,KAAK,IAAI;AAAA,MACjB;AAAA,MAEA,OAAO,IAAQC,KAAQ;AACrB,aAAK,KAAK;AACV,aAAK,KAAKA;AACV,aAAK,SAAS,KAAK,EAAE,QAAQ,QAAQ,KAAK,EAAE,QAAQ,OAAO,KAAK,UAAU,KAAK,EAAE,IAAI,GAAG,UAAU,KAAK,EAAE,IAAI,CAAC,IAAI;AAClH,aAAK,KAAK,GAAG,GAAG,IAAI,IAAIA,IAAG,IAAI,GAAG,GAAG,IAAI,IAAIA,IAAG,IAAI,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI,GAAG,IAAIA,IAAG,CAAC,IAAI,GAAG,CAAC;AAAA,MACpG;AAAA,MAEA,MAAM,GAAW;AACf,YAAI,EAAE,IAAI,IAAAA,KAAI,GAAG,IAAI;AACrB,YAAI,KAAK,IAAI,MAAM,GAAG,IAAI,KAAK;AAC/B,eAAO,GAAG,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,KAAKA,IAAG,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,KAAK,KAAKA,IAAG,IAAI,GAAG,EAAE;AAAA,MACtG;AAAA,MAEA,SAAS;AACP,YAAI,EAAE,IAAI,IAAAA,KAAI,GAAG,IAAI;AACrB,YAAI,UAAU,KAAK,YAAY;AAC/B,eAAO,CAAC,SAAS,IAAI,GAAG,KAAK,GAAG,MAAM,GAAG,KAAK,GAAG,KAAKA,IAAG,KAAKA,IAAG,KAAK,IAAI;AAAA,MAC5E;AAAA,MAEA,cAAc;AAEZ,YAAI,aAAa,KAAK,EAAE,MAAM,KAAK,EAAE,IAAI,IAAI;AAC3C,iBAAO;AAET,YAAI,QAAQ,KAAK,SAAO;AACxB,iBAAS,IAAI,GAAG,IAAI,QAAQ,GAAG,KAAK;AAClC,cAAI,IAAI,KAAK,MAAM,IAAI,KAAK;AAC5B,mBAAS,KAAK,SAAS,GAAG;AACxB,gBAAI,KAAK,KAAK,KAAK,KAAK,KAAK;AAC3B;AACF,gBAAI,EAAE,SAAS,CAAC;AACd,qBAAO;AAAA,UACX;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IAEF;AAEA,UAAM,UAAU;AAAA,MAId,cAAc;AAHd,wBAAW,QAAQ,QAAQ,GAAG;AAC9B,gCAAmB,QAAQ,UAAU,GAAG;AAAA,MAGxC;AAAA,MAEA,SAAS,MAAe,MAAe;AACrC,YAAI;AACJ,YAAI,QAAQ,QAAQ,WAAW,SAAS,IAAI,CAAC,KAAK,KAAK,QAAQ,MAAM;AACnE,eAAK,WAAW,MAAM;AACtB,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO,QAAQ,cAAc,CAAC,MAAM,MAAM,MAAM,MAAM,IAAI,CAAC;AAC3D,gBAAM,QAAQ,OAAO,KAAK,mBAAmB,KAAK,UAAU,IAAI;AAAA,QAClE;AACA,eAAO,EAAE,MAAM,GAAG;AAAA,MACpB;AAAA,MAEA,YAAY,QAAgB,YAAqB;AAC/C,YAAIF,SAAQ,CAAC;AACb,YAAIG,SAAQ,QAAQ,CAAC,GAAG,IAAI,MAAM,UAAU,CAAC,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,GAAG,GAAG;AACpE,QAAAA,SAAQA,OAAM,MAAM,GAAG,CAAC,EAAE,aAAa,OAAO;AAC9C,YAAI,cAAc,CAACA,OAAM,SAAS,UAAU;AAC1C,UAAAA,OAAM,KAAK,UAAU;AACvB,QAAAA,SAAQA,OAAM,KAAK;AACnB,iBAAS,QAAQA,QAAO;AACtB,cAAI,EAAE,MAAM,GAAG,IAAI,KAAK,SAAS,MAAM,QAAQ,cAAc,WAAW,SAAS,IAAI;AACrF,cAAI;AACF,YAAAH,OAAM,KAAK,EAAE,IAAI,MAAM,KAAK,CAAC;AAAA,QACjC;AACA,eAAOA;AAAA,MACT;AAAA,MAEA,cAAcA,QAAc,YAAoB,KAAc;AAC5D,YAAI,IAAc,CAAC;AACnB,YAAIC,SAA4B,CAAC;AACjC,iBAAS,KAAKD;AACZ,YAAE,EAAE,QAAQ,EAAE;AAEhB,iBAAS,OAAO,GAAG,OAAO,aAAa,SAAS,QAAQ;AACtD,cAAI,CAAC,EAAE;AACL;AACF,eAAK,OAAO,KAAK,WAAW;AAC1B;AACF,mBAAS,SAAS,CAAC,GAAG,SAAS,IAAI,OAAO,GAAG;AAC3C,gBAAI,EAAE,SAAS,EAAE,OAAO,UAAU,UAAU,OAAO,QAAQ,OAAO,OAAO;AACvE,cAAAC,OAAM,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,MAAM,CAAC;AAAA,UACzC;AAEA,cAAI,IAAI,IAAI,cAAc,EAAE,OAAO;AACjC,YAAAA,OAAM,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;AACnC,cAAI,IAAI,IAAI,cAAc,EAAE,OAAO;AACjC,YAAAA,OAAM,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,QAAQ,CAAC;AACzC,cAAI,IAAI,IAAI,cAAc,EAAE,OAAO,UAAU;AAC3C,YAAAA,OAAM,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,UAAU,EAAE,CAAC;AAC7C,cAAI,OAAO,UAAU,KAAK,IAAI,IAAI,cAAc,EAAE,OAAO,UAAU;AACjE,YAAAA,OAAM,KAAK,CAAC,EAAE,OAAO,EAAE,OAAO,UAAU,EAAE,CAAC;AAAA,QAC/C;AACA,eAAOA;AAAA,MACT;AAAA,MAEA,YAAYD,QAAyB;AACnC,YAAIC,SAA4B,CAAC;AACjC,iBAAS,MAAMD,OAAM,IAAI,OAAK,EAAE,EAAE,GAAG;AACnC,cAAI,KAAK,cAAcA,MAAK,EAAE;AAC9B,cAAI,MAAM,MAAM,CAACC,OAAM,KAAK,OAAK,EAAE,MAAM,MAAM,EAAE,MAAM,MAAM,EAAE,MAAM,MAAM,EAAE,MAAM,EAAE,GAAG;AACtF,YAAAA,OAAM,KAAK,CAAC,IAAI,EAAE,CAAC;AAAA,UACrB;AAAA,QACF;AACA,eAAOA;AAAA,MACT;AAAA,MAEA,SAAS,OAAe;AACtB,YAAI,OAAO,KAAK,CAAC;AACjB,gBAAQ,IAAI,EAAE,MAAM,MAAM,CAAC;AAC3B,YAAI,UAAU,OAAO,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI,OAAO;AACrD,YAAI,WAAW,OAAO,MAAM,UAAU,GAAG,CAAC,CAAC,IAAI;AAC/C,YAAI,WAAW,OAAO,MAAM,EAAE,IAAE,KAAK,OAAO,MAAM,EAAE,IAAE,KAAG;AACzD,YAAID,QAAOC;AACX,gBAAQ,MAAM;AAAA,eACP;AACH,YAAAD,SAAQ,KAAK,YAAY,OAAO;AAChC,YAAAC,SAAQ,KAAK,cAAcD,QAAO,QAAQ;AAC1C,YAAAA,SAAQ,aAAaA,MAAK;AAC1B;AAAA,eACG;AACH,YAAAA,SAAQ,KAAK,YAAY,SAAS,QAAQ;AAC1C,YAAAC,SAAQ,KAAK,cAAcD,QAAO,UAAU,QAAQ;AACpD,YAAAA,SAAQ,aAAaA,MAAK;AAC1B;AAAA;AAEA,YAAAA,SAAQ,KAAK,YAAY,OAAO;AAChC,YAAAC,SAAQ,KAAK,YAAYD,MAAK;AAC9B;AAAA;AAGJ,eAAO,EAAE,OAAAA,QAAO,OAAAC,QAAO,MAAM,MAAM;AAAA,MACrC;AAAA,IAGF;AAEA,UAAM,KAAK;AAAA,MAST,YAAY,EAAE,IAAI,MAAM,MAAM,GAAG,GAAG;AAJpC,sBAAe,CAAC;AAKd,YAAI;AACJ,eAAO,QAAQ;AACf,aAAK,OAAO;AACZ,aAAK,KAAK;AAEV,cAAM,SAAS,cAAc,KAAK;AAClC,YAAI,QAAQ,MAAM;AAChB,cAAI,IAAI,UAAU,KAAK,QAAM,GAAG,QAAQ,EAAE;AAC1C,cAAI,MAAM,aAAa,gBAAgB,MAAM,EAAE,IAAI,MAAM,OAAO,IAAI;AACpE,cAAI,MAAM,YAAY,kBAAkB,MAAM,EAAE,IAAI,MAAM,IAAI,IAAI;AAClE,cAAI,YAAY;AAChB,cAAI,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI;AACjC,cAAI,UAAU,IAAI,MAAM,IAAI;AAAA,QAC9B,OAAO;AACL,cAAI,UAAU,IAAI,QAAQ,IAAI;AAC9B,cAAI,CAAC,IAAI,CAAC;AACR,gBAAI,UAAU,IAAI,MAAM;AAC1B,cAAI,MAAM,IAAI,IAAI,IAAI;AACtB,cAAI,MAAM,YAAY,aAAa,IAAI,IAAI,KAAK,QAAQ,IAAI,IAAI,KAAK,eAAe;AACpF,cAAI,MAAM,QAAQ,QAAQ,OAAO,GAAG,IAAI,IAAI,MAAM,QAAQ;AAC1D,cAAI,YAAY;AAChB,cAAI,cAAc,OAAK,EAAE,aAAa,QAAQ,QAAQ,EAAE;AACxD,cAAIG,SAAQ,EAAE,IAAI,GAAG,IAAI,KAAK,IAAI,EAAE,EAAE,SAAS;AAC/C,cAAI,QAAQ,EAAE,IAAI,GAAG,IAAI,EAAE,EAAE,SAAS;AACtC,cAAIC,WAAU,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,EAAE;AACjC,cAAI,QAAQ,QAAQ,QAAQ,cAAc,CAAC,QAAQ,SAAS,QAAQ,CAAC;AACrE,cAAI,QAAQ,QAAQ,QAAQ,QAAQ;AACpC,cAAI,QAAQ,mBAAmB,IAAI,GAAG,gBAAgB,QAAQ,MAAM;AAAA,iBAC3D,UAAU,SAAS,WAAW,gBAAgB;AACvD,cAAI,QAAQ,MAAM;AAChB,gBAAI,QAAQ,SAAS,QAAQ,EAAE;AAC/B,qBAAS,sBAAsB,QAAQ,IAAI,MAAM,QAAQ,IAAI,KAAK;AAAA,UACpE;AACA,cAAI,OAAO,SAAS,IAAI,CAAC,KAAK;AAC9B,cAAI,YAAY;AAAA,4CACoBA;AAAA,YAChC,QAAQ,IAAI,OAAO,WAAW,IAAI,KAAK,IAAI,KAAK,WAAW;AAAA,wBAC/C,QAAQ,QAAQ,CAAC,UAAU,SAAS,MAAM,EAAE,IAAI,EAAE,oBAAoB;AAAA,cAChF;AAAA;AAAA,0CAE4B,CAAC,MAAM,IAAI,IAAI,IAAI,YAAY,WAAW,IAAI,CAAC,EAAED,SAAQ,EAAE,IAAIA,MAAK;AAAA;AAAA,+BAE/E,OAAO,iBAAO,IAAI,CAAC,KAAK,QAAQ,OAAO,KAAK;AACnE,cAAI;AACF,gBAAI,MAAM,aAAa,OAAO,IAAI,GAAG,MAAM,QAAQ,OAAO,MAAM;AAAA,QACpE;AACA,aAAK,MAAM;AACX,YAAI,KAAK;AACT,YAAI,eAAe,MAAM,mBAAmB,GAAG;AAC/C,YAAI,eAAe,MAAM,mBAAmB,IAAI;AAChD,YAAI,aAAa,QAAQ,IAAI;AAE7B,cAAM,MAAM;AAEZ,aAAK,UAAU,IAAI;AACnB,aAAK,MAAM,EAAE;AACb,aAAK,YAAY;AAAA,MACnB;AAAA,MAEA,cAAc;AACZ,YAAI,IAAI,KAAK,IAAI,sBAAsB;AACvC,aAAK,KAAK,GAAG,EAAE,MAAM,EAAE,GAAG;AAC1B,aAAK,IAAI;AAET,iBAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AAC1B,cAAI,SAAS;AACb,cAAI;AACJ,cAAI,KAAK,QAAQ,MAAM;AACrB,gBAAI,GAAG,EAAE,QAAQ,GAAG,EAAE,SAAS,CAAC;AAAA,UAClC,OAAO;AAEL,gBAAI;AAAA,cAAG,IAAI,KAAK,IAAI,EAAE,QAAQ,SAAS;AAAA,cACrC,IAAI,IAAI,SAAS,EAAE,UAAU,KAAK,QAAQ,OAAO,IAAI;AAAA,YAAO;AAAA,UAChE;AACA,cAAI,KAAK,QAAQ,MAAM;AACrB,cAAE,KAAK,GAAG,EAAE,QAAQ,GAAG,EAAE;AAAA,UAC3B;AACA,eAAK,OAAO,KAAK;AAAA,QACnB;AAAA,MACF;AAAA,MAEA,MAAM,IAAI;AACR,YAAI,IAAI;AACN,eAAK,IAAI,MAAM,OAAO,GAAG;AACzB,eAAK,IAAI,MAAM,MAAM,GAAG;AAAA,QAC1B;AAAA,MACF;AAAA,MAEA,KAAK,MAAc,GAAW,GAAW;AACvC,YAAI,KAAK,QAAQ;AACf;AAEF,YAAI,QAAQ,QAAQ,MAAM,SAAS,MAAM;AACvC,cAAI,QAAQ,MAAM;AAClB,cAAI,MAAM,QAAQ;AAChB;AACF,gBAAM,UAAU,KAAK,IAAI;AACzB,gBAAM,IAAI,MAAM,OAAO,KAAK,IAAI,MAAM;AACtC,gBAAM,IAAI,MAAM,MAAM,KAAK,IAAI,MAAM;AAAA,QACvC;AAEA,aAAK,UAAU,IAAI;AACnB,aAAK,IAAI,MAAM,OAAO,GAAG,IAAI,KAAK,IAAI,sBAAsB,EAAE,QAAQ;AACtE,aAAK,IAAI,MAAM,MAAM,GAAG,IAAI,KAAK,IAAI,sBAAsB,EAAE,SAAS;AAAA,MACxE;AAAA,MAEA,UAAU,MAAc;AAEtB,SAAC,QAAQ,OAAO,QAAQ,MAAM,OAAO,YAAY,KAAK,GAAG;AACzD,YAAI,KAAK,QAAQ,QAAQ,MAAM,KAAK,SAAS;AAC3C,iBAAO,MAAM,KAAK;AACpB,aAAK,OAAO;AACZ,YAAI,QAAQ;AACV,gBAAM,QAAQ;AAAA,MAClB;AAAA,MAGA,MAAM,KAAa;AACjB,eAAO,IAAI,KAAK,OAAO,MAAM,KAAK,EAAE;AAAA,MACtC;AAAA,MAEA,SAAS,GAAO;AACd,eAAO,KAAK,GAAG,KAAK,EAAE,KAAK,KAAK,GAAG,KAAK,EAAE,KAAK,KAAK,GAAG,IAAI,KAAK,EAAE,SAAS,EAAE,KAAK,KAAK,GAAG,IAAI,KAAK,EAAE,UAAU,EAAE;AAAA,MACnH;AAAA,IACF;AAYA,QAAI,SAAS,CAAC,MAAc;AAC1B,aAAO,sBAAsB,MAAM;AAAA,IACrC;AAEA,WAAO,CAAC;AAER,WAAO,cAAc,OAAK;AAAA,IAAE;AAE5B,WAAO,UAAU,OAAK;AAAA,IAAE;AA4BxB,aAAS,IAAI,GAAG,IAAI,UAAU,MAAM,KAAK;AACvC,cAAQ;AAAA,IACV;AAEA,UAAM,SAAS,YAAY,61CAA8Q;AACzS,UAAM,WAAW,YAAY,qPAAoD;AACjF,UAAM,aAAa,CAAC;AACpB,UAAM,YAAY,eAAe,2OAAsI;AAEvK,UAAM,QAAQ,OAAO,KAAK,MAAM,EAAE,OAAO,OAAK,EAAE,SAAS,EAAE;AAe3D,QAAI,oBAAoB;AAqIxB,WAAO,WAAW,MAAM,OAAO;AAC/B,WAAO,YAAY,CAAC,MAAqB;AACvC,UAAI,EAAE,UAAU,OAAO;AACrB,YAAG,UAAU,YAAW;AACtB,YAAE,eAAe;AACjB;AAAA,QACF;AAEA,mBAAW,MAAM;AACf,gBAAM,QAAQ,MAAM,MAAM,QAAQ,YAAY,EAAE,EAAE,QAAQ,gBAAgB,IAAI;AAC9E,cAAG,MAAM,MAAM,UAAQ,GAAE;AACvB,yBAAa,OAAO,MAAM,KAAK,CAAC;AAAA,UAClC;AAAA,QACF,GAAG,CAAC;AAAA,MACN,OAAO;AACL,YAAI,EAAE,KAAK,UAAU,GAAG,CAAC,KAAK,SAAS;AACrC,oBAAU,OAAO,EAAE,GAAG,IAAI,CAAC;AAAA,QAC7B;AACA,YAAG,EAAE,OAAO,KAAI;AACd,iBAAO,QAAM,MAAM,SAAO,IAAE,MAAM;AAClC,mBAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAwCA,SAAK,UAAU,MAAM;AACnB,UAAI,OAAO,SAAS,OAAO,SAAS;AAClC,kBAAU,SAAS,CAAC;AAAA;AAEpB,iBAAS,IAAI;AAAA,IACjB;AAEA,kBAAc,KAAK;AAEnB,QAAI,aAAa,QAAQ;AACvB,mBAAa,KAAK,MAAM,aAAa,MAAM,CAAC;AAC5C,eAAS;AAAA,IACX,OAAO;AACL,gBAAU,CAAC;AAAA,IACb;AAAA,EAIF;",
  "names": ["rng", "cards", "links", "bp", "slots", "words", "columns"]
}
